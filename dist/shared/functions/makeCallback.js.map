{"version":3,"sources":["../../../src/shared/functions/makeCallback.js"],"names":["makeCallback","callbackProp","overrideValue","event","persist","nativeEvent","currentTarget","value","undefined"],"mappings":";;;;;;;AAkCA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAAeC,aAAf;AAAA,SAAiC,UAACC,KAAD,EAAW;AAC/D,QAAI,OAAOF,YAAP,KAAwB,UAA5B,EAAwC;AACtCE,MAAAA,KAAK,CAACC,OAAN;AADsC,UAE9BC,WAF8B,GAECF,KAFD,CAE9BE,WAF8B;AAAA,UAEjBC,aAFiB,GAECH,KAFD,CAEjBG,aAFiB;AAAA,UAG9BC,KAH8B,GAGpBD,aAHoB,CAG9BC,KAH8B;AAKtC,aAAON,YAAY,CAACI,WAAD,EAAcH,aAAa,KAAKM,SAAlB,GAA8BD,KAA9B,GAAsCL,aAApD,CAAnB;AACD;;AAED,WAAOM,SAAP;AACD,GAVoB;AAAA,CAArB;;eAYeR,Y","sourcesContent":["/**\n * This function takes a callbackProp and a possible overrideValue as parameters and return a function\n * that, given a React SyntheticEvent, will perform the callbackProp with the original nativeEvent taken from the\n * React SyntheticEvent.\n * The purpose of this function is to generate callbacks that receive the nativeEvent rather than the\n * React SyntheticEvent to be used as the following:\n *\n * ```\n * <SomeComponent onClick={makeCallback(callbackProp)} />\n *\n * // callbackProp will then be performed receiving the nativeEvent rather than the SyntheticEvent\n * ```\n *\n * Another purpose of this function is to pass the possible target's value as a second parameter of the callbackProp;\n *\n * Example:\n *\n * ```\n * <Input onChange={makeCallback(onChangeProp)} />\n *\n * // onChangeProp will then be performed receiving the nativeEvent and the Input value\n * ```\n *\n * It is possible to override the input value by defining the overrideValue:\n *\n * ```\n * <Input onChange={makeCallback(onChangeProp, 10)} />\n *\n * // onChangeProp will then be performed receiving the nativeEvent and 10\n * ```\n *\n * Although we do understand the performance improvements that React SyntheticEvent implied, we prefer avoid\n * passing it down to the component's callbacks as it is impossible to access to the nativeEvent asynchronously.\n */\nconst makeCallback = (callbackProp, overrideValue) => (event) => {\n  if (typeof callbackProp === 'function') {\n    event.persist();\n    const { nativeEvent, currentTarget } = event;\n    const { value } = currentTarget;\n\n    return callbackProp(nativeEvent, overrideValue === undefined ? value : overrideValue);\n  }\n\n  return undefined;\n};\n\nexport default makeCallback;\n"],"file":"makeCallback.js"}