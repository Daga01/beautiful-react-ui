{"version":3,"sources":["../../../src/shared/functions/makeCallback.js"],"names":["makeCallback","callbackProp","overrideValue","event","value","currentTarget","undefined"],"mappings":";;;;;;;AA+BA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAAeC,aAAf;AAAA,SAAiC,UAACC,KAAD,EAAW;AAC/D,QAAI,OAAOF,YAAP,KAAwB,UAA5B,EAAwC;AAAA,UAC9BG,KAD8B,GACpBD,KAAK,CAACE,aADc,CAC9BD,KAD8B;AAGtC,aAAOH,YAAY,CAACE,KAAD,EAAQD,aAAa,KAAKI,SAAlB,GAA8BF,KAA9B,GAAsCF,aAA9C,CAAnB;AACD;;AAED,WAAOI,SAAP;AACD,GARoB;AAAA,CAArB;;eAUeN,Y","sourcesContent":["/**\n * This function takes a callbackProp and a possible overrideValue as parameters and returns a function\n * that, given a React SyntheticEvent, will perform the callbackProp passing the event as first parameter\n * and the possible overrideValue as second parameter.\n * The purpose of this function is to generate callbacks having a similar signatures.\n *\n * Usage:\n *s\n * ```\n * <SomeComponent onClick={makeCallback(callbackProp)} />\n *\n * // callbackProp will then be performed receiving the SyntheticEvent as first parameter\n * ```\n *\n *\n * Example:\n *\n * ```\n * <Input onChange={makeCallback(onChangeProp)} />\n *\n * // onChangeProp will then be performed receiving the event and the Input value\n * ```\n *\n * It is possible to override the input value by defining the overrideValue:\n *\n * ```\n * <Input onChange={makeCallback(onChangeProp, 10)} />\n *\n * // onChangeProp will then be performed receiving the nativeEvent and 10\n * ```\n */\nconst makeCallback = (callbackProp, overrideValue) => (event) => {\n  if (typeof callbackProp === 'function') {\n    const { value } = event.currentTarget;\n\n    return callbackProp(event, overrideValue === undefined ? value : overrideValue);\n  }\n\n  return undefined;\n};\n\nexport default makeCallback;\n"],"file":"makeCallback.js"}