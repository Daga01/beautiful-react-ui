{"version":3,"sources":["../../../../src/components/Layout/Card/Card.js"],"names":["Card","React","memo","props","children","textAlign","fluid","horizontal","actionButton","actionButtonIcon","actionButtonRender","onActionButtonClick","reversed","className","rest","cardImage","childrenWithoutImg","PossibleImageWrapper","possibleImageWrapperProps","classList","propTypes","PropTypes","oneOf","bool","oneOfType","instanceOf","Icon","func","defaultProps","undefined","Title","CardTitle","Content","CardContent","Image","CardImage","Footer","CardFooter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Icon from '../../Elements/Icon';\nimport Button from '../../Elements/Button';\nimport CardTitle from './CardTitle';\nimport CardContent from './CardContent';\nimport CardImage from './CardImage';\nimport CardFooter from './CardFooter';\nimport takeCardImageOutOfChildren from './takeCardImageOutOfChildren';\nimport getPossibleImageWrapper from './getPossibleImageWrapper';\n\nimport './card.scss';\n\n\n/**\n * The Card component displays its content in a manner similar to a playing card.\n * It could possibly be composed by `Card.Title`, `Card.Content`, `Card.Image` and eventually `Card.Footer`.\n * The `Card.Image` component will be shown at the top of the card, if the card is vertically aligned.\n * Or on the left if it's horizontally aligned.\n * To change this behavior, you can possibly use `reversed` prop.\n *\n * Warning: the `Card.Image` component will never be shown in the middle of the card.\n *\n */\n// the React.memo has been used here rather than on the export line like other cases, to avoid wrapping the shortcut.\nconst Card = React.memo((props) => {\n  const {\n    children, textAlign, fluid, horizontal, actionButton, actionButtonIcon, actionButtonRender, onActionButtonClick,\n    reversed, className, ...rest\n  } = props;\n\n  const [cardImage, childrenWithoutImg] = takeCardImageOutOfChildren(children);\n  const [PossibleImageWrapper, possibleImageWrapperProps] = getPossibleImageWrapper(reversed, horizontal);\n\n  const classList = classNames('bi bi-card', {\n    [`text-align-${textAlign}`]: !!textAlign,\n    fluid: !!fluid,\n    horizontal: !!horizontal,\n    reversed,\n  }, className);\n\n  return (\n    <div className={classList} {...rest}>\n      <PossibleImageWrapper {...possibleImageWrapperProps}>\n        <div className={classNames({ 'card-action-button-icon': !!actionButton, 'no-img': !cardImage })}>\n          { /* the actionButtonRender overrides the standard action button behaviour */}\n          {actionButton && actionButtonRender && actionButtonRender()}\n          {actionButton && !actionButtonRender && (\n            <Button\n              color=\"transparent\"\n              icon={<Icon name={actionButtonIcon} />}\n              onClick={onActionButtonClick}\n              className=\"btn-dots\"\n              rounded\n            />\n          )}\n        </div>\n        {cardImage && (cardImage)}\n      </PossibleImageWrapper>\n      <div className=\"content\">{childrenWithoutImg}</div>\n    </div>\n  );\n});\n\nCard.propTypes = {\n  /**\n   * Allows to align card text content\n   */\n  textAlign: PropTypes.oneOf(['center', 'left', 'right', 'justify']),\n  /**\n   * Defines if the card should adapt its width to its container or not\n   */\n  fluid: PropTypes.bool,\n  /**\n   * Defines if the card should be horizontal or not\n   */\n  horizontal: PropTypes.bool,\n  /**\n   * If true, it shows an actionButton that will run a callback\n   */\n  actionButton: PropTypes.bool,\n  /**\n   * Allows to change actionButton's icon\n   */\n  actionButtonIcon: PropTypes.oneOfType([PropTypes.instanceOf(Icon), 'string']),\n  /**\n   * Allows to render different actionButton insted of the default one\n   */\n  actionButtonRender: PropTypes.func,\n  /**\n   * The callback to be performed on action button click\n   */\n  onActionButtonClick: PropTypes.func,\n  /**\n   * Defines weather the card should reverse its column or not\n   */\n  reversed: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  textAlign: undefined,\n  fluid: false,\n  horizontal: false,\n  actionButton: false,\n  actionButtonIcon: 'ellipsis-v',\n  actionButtonRender: undefined,\n  onActionButtonClick: undefined,\n  reversed: false,\n};\n\nCard.Title = CardTitle;\nCard.Content = CardContent;\nCard.Image = CardImage;\nCard.Footer = CardFooter;\n\nexport default Card;\n"],"file":"Card.js"}