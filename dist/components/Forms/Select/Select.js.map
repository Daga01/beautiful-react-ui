{"version":3,"sources":["components/Forms/Select/Select.js"],"names":["Select","props","options","value","placeholder","onChange","toggleOnChange","filtrable","filterInputPlaceholder","filterNoResultLabel","fluid","multiStyle","clearable","className","rest","isOpen","setIsOpen","hasOptionGroups","classList","open","onChangeHandler","option","Trigger","undefined","propTypes","OptionsType","isRequired","Value","PropTypes","func","helpText","string","bool","oneOf","defaultProps","React","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SelectTrigger from './SelectTrigger';\nimport SelectDropDown from './SelectDropDown';\nimport FloatingContent from '../../Elements/FloatingContent';\nimport optionsAreGrouped from './utils/optionsAreGrouped';\nimport OptionsType from './utils/OptionsType';\nimport Value from './utils/ValueType';\n\nimport './select.scss';\n\n/**\n * A Select component is a dropdown list that can be used to select between choices in a form.\n */\nconst Select = (props) => {\n  const {\n    options, value, placeholder, onChange, toggleOnChange, filtrable, filterInputPlaceholder, filterNoResultLabel,\n    fluid, multiStyle, clearable, className, ...rest\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const hasOptionGroups = optionsAreGrouped(options);\n\n  const classList = classNames('bi bi-select', {\n    clearable,\n    fluid,\n    open: isOpen,\n  }, className);\n\n  // on change handler\n  const onChangeHandler = (option) => {\n    if (onChange && option.value !== value) onChange(option.value, options, value);\n    if (toggleOnChange) setIsOpen(false);\n  };\n  // defines the trigger for the FloatingContent\n  const Trigger = (\n    <SelectTrigger\n      options={options}\n      hasOptionGroups={hasOptionGroups}\n      value={value}\n      placeholder={placeholder}\n      multiStyle={multiStyle}\n      className={classList}\n      onClick={() => setIsOpen(true)}\n      onClear={() => onChange(undefined, options, value)}\n      clearable={clearable}\n      {...rest}\n    />\n  );\n\n  return (\n    <FloatingContent\n      trigger={Trigger}\n      onToggle={() => setIsOpen(!isOpen)}\n      isShown={isOpen}\n      placement=\"bottom-center\"\n      widthAsTrigger\n      offset={10}\n    >\n      <SelectDropDown\n        options={options}\n        hasOptionGroups={hasOptionGroups}\n        onChange={onChangeHandler}\n        value={value}\n        filtrable={filtrable}\n        filterInputPlaceholder={filterInputPlaceholder}\n        filterNoResultLabel={filterNoResultLabel}\n      />\n    </FloatingContent>\n  );\n};\n\nSelect.propTypes = {\n  /**\n   * The select options. <br/>\n   * Can be an array of object defined like the following: <br />\n   * ```\n   * const options = [\n   *    { label: 'Option 1', value: 1 },\n   *    { label: 'Option 2', value: 2 },\n   *    { label: 'Option 3', value: 'option3', disabled: true },\n   * ];\n   * ```\n   *\n   * or an array of options group like: <br />\n   * ```\n   * const optionsGroup = [\n   *  {\n   *    name: 'Group 1',\n   *    options: [\n   *      { label: 'Option 1', value: 1 },\n   *      { label: 'Option 2', value: 2 },\n   *      { label: 'Option 3', value: 'option3', disabled: true },\n   *    ],\n   *  },\n   *  {\n   *    name: 'Group 2',\n   *    options: [\n   *      { label: 'Option 4', value: 4 },\n   *      { label: 'Option 5', value: 5 },\n   *      { label: 'Option 6', value: 6 },\n   *    ],\n   *  }\n   * ];\n   * ```\n   */\n  options: OptionsType.isRequired,\n  /**\n   * The value of the selected item, if not set will show the placeholder. <br/>\n   * It can be the value of an option or an array of values in case is a multi selection Select.\n   */\n  value: Value,\n  /**\n   * The on change callback\n   */\n  onChange: PropTypes.func,\n  /**\n   * Displays a help text right under the component\n   */\n  helpText: PropTypes.string,\n  /**\n   * The text to show when nothing is selected\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Defines if the select should take all the possible width\n   */\n  fluid: PropTypes.bool,\n  /**\n   * Defines whether the onChange callback should be fired on option select\n   */\n  toggleOnChange: PropTypes.bool,\n  /**\n   * Defines whether the options list should be filtrable or not\n   */\n  filtrable: PropTypes.bool,\n  /**\n   * Defines the multiple selection style\n   */\n  multiStyle: PropTypes.oneOf(['strings', 'pills']),\n  /**\n   * Defines the filter input placeholder\n   */\n  filterInputPlaceholder: PropTypes.string,\n  /**\n   * Defines the message to show when no results are found\n   */\n  filterNoResultLabel: PropTypes.string,\n  /**\n   * Defines whether show the clearable icon or not\n   */\n  clearable: PropTypes.bool,\n};\n\nSelect.defaultProps = {\n  value: '',\n  onChange: undefined,\n  placeholder: 'Select...',\n  helpText: undefined,\n  fluid: false,\n  toggleOnChange: true,\n  filtrable: false,\n  multiStyle: 'pills',\n  filterInputPlaceholder: 'Filter options...',\n  filterNoResultLabel: 'No options available',\n  clearable: true,\n};\n\nexport default React.memo(Select);\n"],"file":"Select.js"}