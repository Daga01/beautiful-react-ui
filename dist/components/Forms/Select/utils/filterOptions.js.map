{"version":3,"sources":["components/Forms/Select/utils/filterOptions.js"],"names":["filterOverOptions","options","filter","option","label","toLowerCase","includes","filterOverGroup","groups","filteredGroups","map","name","length","filterOptions","items","hasOptionGroups","method"],"mappings":";;;;;;;AAOA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAUC,MAAV;AAAA,SACxBD,OAAO,CAACC,MAAR,CAAe,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,KAAP,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCJ,MAAM,CAACG,WAAP,EAApC,CAAZ;AAAA,GAAf,CADwB;AAAA,CAA1B;;AAWA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASN,MAAT,EAAoB;AAC1C,MAAMO,cAAc,GAAGD,MAAM,CAACE,GAAP,CAAW;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,QAASV,OAAT,QAASA,OAAT;AAAA,WAAwB;AACxDU,MAAAA,IAAI,EAAJA,IADwD;AAExDV,MAAAA,OAAO,EAAED,iBAAiB,CAACC,OAAD,EAAUC,MAAV;AAF8B,KAAxB;AAAA,GAAX,CAAvB;AAKA,SAAOO,cAAc,CAACP,MAAf,CAAsB;AAAA,QAAGD,OAAH,SAAGA,OAAH;AAAA,WAAiBA,OAAO,CAACW,MAAR,GAAiB,CAAlC;AAAA,GAAtB,CAAP;AACD,CAPD;;AAkBA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQZ,MAAR,EAA4C;AAAA,MAA5Ba,eAA4B,uEAAV,KAAU;AAChE,MAAIb,MAAM,KAAK,EAAX,IAAiB,CAACA,MAAtB,EAA8B,OAAOY,KAAP;AAC9B,MAAME,MAAM,GAAGD,eAAe,GAAGR,eAAH,GAAqBP,iBAAnD;AAEA,SAAOgB,MAAM,CAACF,KAAD,EAAQZ,MAAR,CAAb;AACD,CALD;;eAOeW,a","sourcesContent":["/**\n * It runs over an array of options an returns those matching the given filter.\n * The comparison is intentionally not case-sensitive.\n * @param options\n * @param filter\n * @returns {*}\n */\nconst filterOverOptions = (options, filter) => (\n  options.filter((option) => option.label.toLowerCase().includes(filter.toLowerCase()))\n);\n\n/**\n * The following function runs over an array of grouped options a returns those having the options matching\n * the given filter\n * @param groups\n * @param filter\n * @returns {*}\n */\nconst filterOverGroup = (groups, filter) => {\n  const filteredGroups = groups.map(({ name, options }) => ({\n    name,\n    options: filterOverOptions(options, filter),\n  }));\n\n  return filteredGroups.filter(({ options }) => options.length > 0);\n};\n\n/**\n * The following functions accepts an array of options/option-groups and return an new array of filtered items\n * whom label matches the given filter.\n * If provided array is a group the `hasOptionGroups` should then be set as true.\n * @param items\n * @param filter\n * @param hasOptionGroups\n * @returns {*}\n */\nconst filterOptions = (items, filter, hasOptionGroups = false) => {\n  if (filter === '' || !filter) return items;\n  const method = hasOptionGroups ? filterOverGroup : filterOverOptions;\n\n  return method(items, filter);\n};\n\nexport default filterOptions;\n"],"file":"filterOptions.js"}