{"version":3,"sources":["components/Forms/Select/SelectLabel.js"],"names":["SelectLabel","options","value","hasOptionGroups","multiStyle","placeholder","selectedItems","shouldShowPlaceholder","Array","isArray","length","undefined","propTypes","OptionsType","isRequired","PropTypes","bool","ValueType","oneOf","string","defaultProps","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAOA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAkE;AAAA,MAA/DC,OAA+D,QAA/DA,OAA+D;AAAA,MAAtDC,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CC,eAA+C,QAA/CA,eAA+C;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AACpF,MAAMC,aAAa,GAAG,CAACH,eAAD,GAAmB,qCAAoBF,OAApB,EAA6BC,KAA7B,CAAnB,GAAyD,sCAAqBD,OAArB,EAA8BC,KAA9B,CAA/E;AACA,MAAMK,qBAAqB,GAAGC,KAAK,CAACC,OAAN,CAAcH,aAAd,IAA+BA,aAAa,CAACI,MAAd,KAAyB,CAAxD,GAA4D,CAACJ,aAA3F;AAEA,SACE;AAAM,IAAA,SAAS,EAAEC,qBAAqB,GAAG,uBAAH,GAA6BI;AAAnE,KACGJ,qBAAqB,GAAGF,WAAH,GAAiB,iCAAeC,aAAf,EAA8BF,UAA9B,CADzC,CADF;AAKD,CATD;;AAWAJ,WAAW,CAACY,SAAZ,GAAwB;AACtBX,EAAAA,OAAO,EAAEY,wBAAYC,UADC;AAEtBX,EAAAA,eAAe,EAAEY,sBAAUC,IAFL;AAGtBd,EAAAA,KAAK,EAAEe,qBAHe;AAItBb,EAAAA,UAAU,EAAEW,sBAAUG,KAAV,CAAgB,CAAC,SAAD,EAAY,OAAZ,CAAhB,CAJU;AAKtBb,EAAAA,WAAW,EAAEU,sBAAUI;AALD,CAAxB;AAQAnB,WAAW,CAACoB,YAAZ,GAA2B;AACzBlB,EAAAA,KAAK,EAAES,SADkB;AAEzBR,EAAAA,eAAe,EAAE,KAFQ;AAGzBC,EAAAA,UAAU,EAAE,OAHa;AAIzBC,EAAAA,WAAW,EAAEM;AAJY,CAA3B;;eAOeU,kBAAMC,IAAN,CAAWtB,WAAX,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport OptionsType from './utils/OptionsType';\nimport ValueType from './utils/ValueType';\nimport findSelectedOptions from './utils/findSelectedOptions';\nimport findSelectedInGroups from './utils/findSelectedInGroups';\nimport getSelectLabel from './utils/getSelectLabels';\n\n\n/**\n * Shows the Select label according to its options and value or, if no value is available or no option is found,\n * shows a placeholder\n */\nconst SelectLabel = ({ options, value, hasOptionGroups, multiStyle, placeholder }) => {\n  const selectedItems = !hasOptionGroups ? findSelectedOptions(options, value) : findSelectedInGroups(options, value);\n  const shouldShowPlaceholder = Array.isArray(selectedItems) ? selectedItems.length === 0 : !selectedItems;\n\n  return (\n    <span className={shouldShowPlaceholder ? 'bi-select-placeholder' : undefined}>\n      {shouldShowPlaceholder ? placeholder : getSelectLabel(selectedItems, multiStyle)}\n    </span>\n  );\n};\n\nSelectLabel.propTypes = {\n  options: OptionsType.isRequired,\n  hasOptionGroups: PropTypes.bool,\n  value: ValueType,\n  multiStyle: PropTypes.oneOf(['strings', 'pills']),\n  placeholder: PropTypes.string,\n};\n\nSelectLabel.defaultProps = {\n  value: undefined,\n  hasOptionGroups: false,\n  multiStyle: 'pills',\n  placeholder: undefined,\n};\n\nexport default React.memo(SelectLabel);\n"],"file":"SelectLabel.js"}