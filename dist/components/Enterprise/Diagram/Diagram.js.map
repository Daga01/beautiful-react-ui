{"version":3,"sources":["components/Enterprise/Diagram/Diagram.js"],"names":["Diagram","props","schema","onChange","rest","segment","setSegment","portRefs","current","nodeRefs","onNodesChange","nextNodes","nodes","onPortRegister","portId","portEl","onNodeRegister","nodeId","nodeEl","onDragNewSegment","from","to","alignment","id","onSegmentFail","undefined","onSegmentConnect","input","output","nextLinks","links","onLinkDelete","propTypes","PropTypes","shape","arrayOf","NodeType","isRequired","LinkType","func","defaultProps","React","memo","isEqual"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport DiagramCanvas from './DiagramCanvas/DiagramCanvas';\nimport NodesCanvas from './NodesCanvas/NodesCanvas';\nimport LinksCanvas from './LinksCanvas/LinksCanvas';\nimport { LinkType, NodeType } from './utils/Types';\n\nimport './diagram.scss';\n\n/**\n * The Diagram component is a controlled component allowing the edit and creation of diagrams through a quite\n * simple, extensible and functional data model.\n */\nconst Diagram = (props) => {\n  const { schema, onChange, ...rest } = props;\n  const [segment, setSegment] = useState();\n  const { current: portRefs } = useRef({}); // keeps the port elements references\n  const { current: nodeRefs } = useRef({}); // keeps the node elements references\n\n  // when nodes change, performs the onChange callback with the new incoming data\n  const onNodesChange = useCallback((nextNodes) => {\n    onChange({ ...schema, nodes: nextNodes });\n  }, [schema, onChange]);\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = useCallback((portId, portEl) => {\n    portRefs[portId] = portEl;\n  }, [portRefs]);\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = useCallback((nodeId, nodeEl) => {\n    nodeRefs[nodeId] = nodeEl;\n  }, [nodeRefs]);\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to, alignment) => {\n    setSegment({ id: `segment-${portId}`, from, to, alignment });\n  }, []);\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined);\n  }, []);\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = useCallback((input, output) => {\n    const nextLinks = [...(schema.links || []), { input, output }];\n    onChange({ ...schema, links: nextLinks });\n    setSegment(undefined);\n  }, [schema, onChange]);\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = useCallback((nextLinks) => {\n    onChange({ ...schema, links: nextLinks });\n  }, [schema, onChange]);\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} {...rest}>\n      <NodesCanvas\n        nodes={schema.nodes}\n        onChange={onNodesChange}\n        onNodeRegister={onNodeRegister}\n        onPortRegister={onPortRegister}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onSegmentConnect={onSegmentConnect}\n      />\n      <LinksCanvas\n        nodes={schema.nodes}\n        links={schema.links}\n        segment={segment}\n        onChange={onLinkDelete}\n      />\n    </DiagramCanvas>\n  );\n};\n\nDiagram.propTypes = {\n  /**\n   * The diagram current schema\n   */\n  schema: PropTypes.shape({\n    nodes: PropTypes.arrayOf(NodeType).isRequired,\n    links: PropTypes.arrayOf(LinkType),\n  }),\n  /**\n   * The callback to be performed every time the model changes\n   */\n  onChange: PropTypes.func,\n};\n\nDiagram.defaultProps = {\n  schema: { nodes: [], links: [] },\n  onChange: undefined,\n};\n\nexport default React.memo(Diagram, isEqual);\n"],"file":"Diagram.js"}