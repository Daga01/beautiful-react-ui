{"version":3,"sources":["components/Enterprise/Diagram/DiagramNode/DiagramNode.js"],"names":["DiagramNode","props","id","content","coordinates","type","inputs","outputs","data","onPositionChange","onPortRegister","onDragNewSegment","onMount","onSegmentFail","onSegmentConnect","render","className","registerPort","throttleBy","ref","onDragStart","onDrag","dragStartPoint","current","event","info","stopImmediatePropagation","stopPropagation","nextCoords","offset","classList","InputPorts","map","OutputPorts","customRenderProps","renderer","propTypes","PropTypes","oneOfType","string","isRequired","arrayOf","number","elementType","node","PortType","oneOf","shape","func","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CustomRenderer from './CustomRender';\nimport getDiagramNodeStyle from './getDiagramNodeStyle';\nimport { usePortRegistration, useNodeRegistration } from '../utils/useContextRegistration';\nimport { PortType } from '../utils/Types';\nimport portGenerator from './portGenerator';\nimport { useDrag } from '../../../../shared';\n\n/**\n * A Diagram Node component displays a single diagram node, handles the drag n drop business logic and fires the\n * related callback. Displays input and output ports if existing and takes care of firing the `onPortRegister` callback\n * when a port is ready (aka rendered),\n */\nconst DiagramNode = (props) => {\n  const {\n    id, content, coordinates, type, inputs, outputs, data, onPositionChange, onPortRegister, onDragNewSegment, onMount,\n    onSegmentFail, onSegmentConnect, render, className,\n  } = props;\n  const registerPort = usePortRegistration(inputs, outputs, onPortRegister); // get the port registration method\n  const { ref, onDragStart, onDrag } = useDrag({ throttleBy: 14 }); // get the drag n drop methods\n  const dragStartPoint = useRef(coordinates); // keeps the drag start point in a persistent reference\n\n  // when drag starts, save the starting coordinates into the `dragStartPoint` ref\n  onDragStart(() => {\n    dragStartPoint.current = coordinates;\n  });\n\n  // whilst dragging calculates the next coordinates and perform the `onPositionChange` callback\n  onDrag((event, info) => {\n    if (onPositionChange) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      const nextCoords = [dragStartPoint.current[0] - info.offset[0], dragStartPoint.current[1] - info.offset[1]];\n      onPositionChange(id, nextCoords);\n    }\n  });\n\n  // perform the onMount callback when the note is allowed to register\n  useNodeRegistration(ref, onMount, id);\n\n  const classList = useMemo(() => classNames('bi bi-diagram-node', {\n    [`bi-diagram-node-${type}`]: !!type && !render,\n  }, className), [type, className]);\n\n  // generate ports\n  const InputPorts = inputs.map(portGenerator(registerPort, onDragNewSegment, onSegmentFail, onSegmentConnect));\n  const OutputPorts = outputs.map(portGenerator(registerPort, onDragNewSegment, onSegmentFail, onSegmentConnect));\n  const customRenderProps = { id, content, type, inputs: InputPorts, outputs: OutputPorts, data, className };\n\n  return (\n    <div className={classList} ref={ref} style={getDiagramNodeStyle(coordinates)}>\n      {render && typeof renderer === 'function' && (<CustomRenderer {...customRenderProps} />)}\n      {!render && (\n        <>\n          {content}\n          <div className=\"bi-port-wrapper\">\n            <div className=\"bi-input-ports\">\n              {InputPorts}\n            </div>\n            <div className=\"bi-output-ports\">\n              {OutputPorts}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\n\nDiagramNode.propTypes = {\n  /**\n   * The diagram node id\n   */\n  id: PropTypes.oneOfType([PropTypes.string]).isRequired,\n  /**\n   * The diagram current coordinates, relative to the container\n   */\n  coordinates: PropTypes.arrayOf(PropTypes.number).isRequired,\n  /**\n   * The diagram content\n   */\n  content: PropTypes.oneOfType([PropTypes.elementType, PropTypes.node]),\n  /**\n   * An array of input ports\n   */\n  inputs: PropTypes.arrayOf(PortType),\n  /**\n   * An array of output ports\n   */\n  outputs: PropTypes.arrayOf(PortType),\n  /**\n   * The node type\n   */\n  type: PropTypes.oneOf(['default']),\n  /**\n   * An object to possibly keep data between renders\n   */\n  data: PropTypes.shape({}),\n  /**\n   * Defines a custom render function\n   */\n  render: PropTypes.func,\n  /**\n   * The callback to be fired when position changes\n   */\n  onPositionChange: PropTypes.func,\n  /**\n   * The callback to be fired when a new diagram is mounted\n   */\n  onMount: PropTypes.func,\n  /**\n   * The callback to be fired when a new port is settled\n   */\n  onPortRegister: PropTypes.func,\n  /**\n   * The callback to be fired when dragging a new segment from one of the node's port\n   */\n  onDragNewSegment: PropTypes.func,\n  /**\n   * The callback to be fired when a new segment fails to connect\n   */\n  onSegmentFail: PropTypes.func,\n  /**\n   * The callback to be fired when a new segment connects to a port\n   */\n  onSegmentConnect: PropTypes.func,\n  /**\n   * The possible className\n   */\n  className: PropTypes.string,\n};\n\nDiagramNode.defaultProps = {\n  type: 'default',\n  content: '',\n  inputs: [],\n  outputs: [],\n  data: {},\n  onPositionChange: undefined,\n  render: undefined,\n  onMount: undefined,\n  onPortRegister: undefined,\n  onDragNewSegment: undefined,\n  onSegmentFail: undefined,\n  onSegmentConnect: undefined,\n  className: '',\n};\n\nexport default React.memo(DiagramNode);\n"],"file":"DiagramNode.js"}