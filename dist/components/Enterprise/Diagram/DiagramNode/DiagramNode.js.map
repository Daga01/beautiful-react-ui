{"version":3,"sources":["components/Enterprise/Diagram/DiagramNode/DiagramNode.js"],"names":["DiagramNode","props","id","content","coordinates","type","inputs","outputs","onPositionChange","onPortRegister","onDragNewSegment","onMount","onSegmentFail","onSegmentConnect","renderer","className","registerPort","throttleBy","ref","onDragStart","onDrag","dragStartPoint","current","event","info","stopImmediatePropagation","stopPropagation","nextCoords","offset","classList","InputPorts","map","OutputPorts","customRendererProps","propTypes","PropTypes","oneOfType","string","isRequired","arrayOf","number","elementType","node","PortType","oneOf","func","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CustomRenderer from './CustomRenderer';\nimport getDiagramNodeStyle from './getDiagramNodeStyle';\nimport { usePortRegistration, useNodeRegistration } from '../utils/useContextRegistration';\nimport { PortType } from '../utils/Types';\nimport portGenerator from './portGenerator';\nimport { useDrag } from '../../../../shared';\n\n/**\n * A Diagram Node component displays a single diagram node, handles the drag n drop business logic and fires the\n * related callback. Displays input and output ports if existing and takes care of firing the `onPortRegister` callback\n * when a port is ready (aka rendered),\n */\nconst DiagramNode = (props) => {\n  const {\n    id, content, coordinates, type, inputs, outputs, onPositionChange, onPortRegister, onDragNewSegment, onMount,\n    onSegmentFail, onSegmentConnect, renderer, className,\n  } = props;\n  const registerPort = usePortRegistration(inputs, outputs, onPortRegister); // get the port registration method\n  const { ref, onDragStart, onDrag } = useDrag({ throttleBy: 14 }); // get the drag n drop methods\n  const dragStartPoint = useRef(coordinates); // keeps the drag start point in a persistent reference\n\n  // when drag starts, save the starting coordinates into the `dragStartPoint` ref\n  onDragStart(() => {\n    dragStartPoint.current = coordinates;\n  });\n\n  // whilst dragging calculates the next coordinates and perform the `onPositionChange` callback\n  onDrag((event, info) => {\n    if (onPositionChange) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      const nextCoords = [dragStartPoint.current[0] - info.offset[0], dragStartPoint.current[1] - info.offset[1]];\n      onPositionChange(id, nextCoords);\n    }\n  });\n\n  // perform the onMount callback when the note is allowed to register\n  useNodeRegistration(ref, onMount, id);\n\n  const classList = useMemo(() => classNames('bi bi-diagram-node', {\n    [`bi-diagram-node-${type}`]: !!type && !renderer,\n  }, className), [type, className]);\n\n  // generate ports\n  const InputPorts = inputs.map(portGenerator(registerPort, onDragNewSegment, onSegmentFail, onSegmentConnect));\n  const OutputPorts = outputs.map(portGenerator(registerPort, onDragNewSegment, onSegmentFail, onSegmentConnect));\n  const customRendererProps = { renderer, id, content, type, inputs: InputPorts, outputs: OutputPorts, className };\n\n  return (\n    <div className={classList} ref={ref} style={getDiagramNodeStyle(coordinates)}>\n      {renderer && typeof renderer === 'function' && (<CustomRenderer {...customRendererProps} />)}\n      {!renderer && (\n        <>\n          {content}\n          <div className=\"bi-port-wrapper\">\n            <div className=\"bi-input-ports\">\n              {InputPorts}\n            </div>\n            <div className=\"bi-output-ports\">\n              {OutputPorts}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\n\nDiagramNode.propTypes = {\n  /**\n   * The diagram node id\n   */\n  id: PropTypes.oneOfType([PropTypes.string]).isRequired,\n  /**\n   * The diagram current coordinates, relative to the container\n   */\n  coordinates: PropTypes.arrayOf(PropTypes.number).isRequired,\n  /**\n   * The diagram content\n   */\n  content: PropTypes.oneOfType([PropTypes.elementType, PropTypes.node]),\n  /**\n   * An array of input ports\n   */\n  inputs: PropTypes.arrayOf(PortType),\n  /**\n   * An array of output ports\n   */\n  outputs: PropTypes.arrayOf(PortType),\n  /**\n   * The node type\n   */\n  type: PropTypes.oneOf(['default']),\n  /**\n   * Defines a custom renderer\n   */\n  renderer: PropTypes.func,\n  /**\n   * The callback to be fired when position changes\n   */\n  onPositionChange: PropTypes.func,\n  /**\n   * The callback to be fired when a new diagram is mounted\n   */\n  onMount: PropTypes.func,\n  /**\n   * The callback to be fired when a new port is settled\n   */\n  onPortRegister: PropTypes.func,\n  /**\n   * The callback to be fired when dragging a new segment from one of the node's port\n   */\n  onDragNewSegment: PropTypes.func,\n  /**\n   * The callback to be fired when a new segment fails to connect\n   */\n  onSegmentFail: PropTypes.func,\n  /**\n   * The callback to be fired when a new segment connects to a port\n   */\n  onSegmentConnect: PropTypes.func,\n  /**\n   * The possible className\n   */\n  className: PropTypes.string,\n};\n\nDiagramNode.defaultProps = {\n  type: 'default',\n  content: '',\n  inputs: [],\n  outputs: [],\n  onPositionChange: undefined,\n  renderer: undefined,\n  onMount: undefined,\n  onPortRegister: undefined,\n  onDragNewSegment: undefined,\n  onSegmentFail: undefined,\n  onSegmentConnect: undefined,\n  className: '',\n};\n\nexport default React.memo(DiagramNode);\n"],"file":"DiagramNode.js"}