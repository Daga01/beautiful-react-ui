{"version":3,"sources":["components/Enterprise/Diagram/LinksCanvas/LinksCanvas.js"],"names":["LinksCanvas","props","nodes","segment","onChange","links","removeFromLinksArray","link","length","nextLinks","map","input","output","propTypes","PropTypes","arrayOf","NodeType","LinkType","exact","id","string","from","number","to","alignment","PortAlignment","func","defaultProps","undefined","React","memo"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAKA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,MACrBC,KADqB,GACeD,KADf,CACrBC,KADqB;AAAA,MACdC,OADc,GACeF,KADf,CACdE,OADc;AAAA,MACLC,QADK,GACeH,KADf,CACLG,QADK;AAAA,MACKC,KADL,GACeJ,KADf,CACKI,KADL;AAG7B,MAAMC,oBAAoB,GAAG,wBAAY,UAACC,IAAD,EAAU;AACjD,QAAIF,KAAK,CAACG,MAAN,GAAe,CAAf,IAAoBJ,QAAxB,EAAkC;AAChC,UAAMK,SAAS,GAAG,qCAAoBF,IAApB,EAA0BF,KAA1B,CAAlB;AACAD,MAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;AACF,GAL4B,EAK1B,CAACJ,KAAD,EAAQD,QAAR,CAL0B,CAA7B;AAOA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGC,KAAK,IAAIA,KAAK,CAACG,MAAN,GAAe,CAAxB,IAA6BH,KAAK,CAACK,GAAN,CAAU,UAACH,IAAD;AAAA,WACtC,gCAAC,gBAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,KAAK,EAAE,oCAAmBL,KAAnB,EAA0BK,IAAI,CAACI,KAA/B,CAFT;AAGE,MAAA,MAAM,EAAE,oCAAmBT,KAAnB,EAA0BK,IAAI,CAACK,MAA/B,CAHV;AAIE,MAAA,QAAQ,EAAEN,oBAJZ;AAKE,MAAA,GAAG,YAAKC,IAAI,CAACI,KAAV,cAAmBJ,IAAI,CAACK,MAAxB;AALL,MADsC;AAAA,GAAV,CADhC,EAUGT,OAAO,IACN,gCAAC,mBAAD,EAAaA,OAAb,CAXJ,CADF;AAgBD,CA1BD;;AA4BAH,WAAW,CAACa,SAAZ,GAAwB;AACtBX,EAAAA,KAAK,EAAEY,sBAAUC,OAAV,CAAkBC,eAAlB,CADe;AAEtBX,EAAAA,KAAK,EAAES,sBAAUC,OAAV,CAAkBE,eAAlB,CAFe;AAGtBd,EAAAA,OAAO,EAAEW,sBAAUI,KAAV,CAAgB;AACvBC,IAAAA,EAAE,EAAEL,sBAAUM,MADS;AAEvBC,IAAAA,IAAI,EAAEP,sBAAUC,OAAV,CAAkBD,sBAAUQ,MAA5B,CAFiB;AAGvBC,IAAAA,EAAE,EAAET,sBAAUC,OAAV,CAAkBD,sBAAUQ,MAA5B,CAHmB;AAIvBE,IAAAA,SAAS,EAAEC;AAJY,GAAhB,CAHa;AAStBrB,EAAAA,QAAQ,EAAEU,sBAAUY;AATE,CAAxB;AAYA1B,WAAW,CAAC2B,YAAZ,GAA2B;AACzBzB,EAAAA,KAAK,EAAE,EADkB;AAEzBG,EAAAA,KAAK,EAAE,EAFkB;AAGzBF,EAAAA,OAAO,EAAEyB,SAHgB;AAIzBxB,EAAAA,QAAQ,EAAEwB;AAJe,CAA3B;;eAOeC,kBAAMC,IAAN,CAAW9B,WAAX,C","sourcesContent":["import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DiagramLink from '../Link/Link';\nimport Segment from '../Segment/Segment';\nimport { LinkType, NodeType, PortAlignment } from '../utils/Types';\nimport findInvolvedEntity from './findInvolvedEntity';\nimport removeLinkFromArray from './removeLinkFromArray';\n\n/**\n * Handles the links' events and business logic, wraps the links within a svg\n */\nconst LinksCanvas = (props) => {\n  const { nodes, segment, onChange, links } = props;\n\n  const removeFromLinksArray = useCallback((link) => {\n    if (links.length > 0 && onChange) {\n      const nextLinks = removeLinkFromArray(link, links);\n      onChange(nextLinks);\n    }\n  }, [links, onChange]);\n\n  return (\n    <svg className=\"bi bi-link-canvas-layer\">\n      {links && links.length > 0 && links.map((link) => (\n        <DiagramLink\n          link={link}\n          input={findInvolvedEntity(nodes, link.input)}\n          output={findInvolvedEntity(nodes, link.output)}\n          onDelete={removeFromLinksArray}\n          key={`${link.input}-${link.output}`}\n        />\n      ))}\n      {segment && (\n        <Segment {...segment} />\n      )}\n    </svg>\n  );\n};\n\nLinksCanvas.propTypes = {\n  nodes: PropTypes.arrayOf(NodeType),\n  links: PropTypes.arrayOf(LinkType),\n  segment: PropTypes.exact({\n    id: PropTypes.string,\n    from: PropTypes.arrayOf(PropTypes.number),\n    to: PropTypes.arrayOf(PropTypes.number),\n    alignment: PortAlignment,\n  }),\n  onChange: PropTypes.func,\n};\n\nLinksCanvas.defaultProps = {\n  nodes: [],\n  links: [],\n  segment: undefined,\n  onChange: undefined,\n};\n\nexport default React.memo(LinksCanvas);\n"],"file":"LinksCanvas.js"}