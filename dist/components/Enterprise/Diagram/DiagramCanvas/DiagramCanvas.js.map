{"version":3,"sources":["components/Enterprise/Diagram/DiagramCanvas/DiagramCanvas.js"],"names":["DiagramCanvas","props","children","portRefs","nodeRefs","className","rest","bbox","setBoundingBox","canvasRef","classList","calculateBBox","el","nextBBox","getBoundingClientRect","current","canvas","ports","nodes","propTypes","PropTypes","shape","string","defaultProps","React","memo"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MACvBC,QADuB,GAC8BD,KAD9B,CACvBC,QADuB;AAAA,MACbC,QADa,GAC8BF,KAD9B,CACbE,QADa;AAAA,MACHC,QADG,GAC8BH,KAD9B,CACHG,QADG;AAAA,MACOC,SADP,GAC8BJ,KAD9B,CACOI,SADP;AAAA,MACqBC,IADrB,4BAC8BL,KAD9B;;AAAA,kBAEA,qBAAS,IAAT,CAFA;AAAA;AAAA,MAExBM,IAFwB;AAAA,MAElBC,cAFkB;;AAG/B,MAAMC,SAAS,GAAG,oBAAlB;AACA,MAAMC,SAAS,GAAG,4BAAW,eAAX,EAA4BL,SAA5B,CAAlB;AAGA,MAAMM,aAAa,GAAG,wBAAY,UAACC,EAAD,EAAQ;AACxC,QAAIA,EAAJ,EAAQ;AACN,UAAMC,QAAQ,GAAGD,EAAE,CAACE,qBAAH,EAAjB;;AACA,UAAI,CAAC,yBAAQD,QAAR,EAAkBN,IAAlB,CAAL,EAA8B;AAC5BC,QAAAA,cAAc,CAACK,QAAD,CAAd;AACD;AACF;AACF,GAPqB,EAOnB,CAACN,IAAD,EAAOC,cAAP,CAPmB,CAAtB;AAWA,wBAAU;AAAA,WAAMG,aAAa,CAACF,SAAS,CAACM,OAAX,CAAnB;AAAA,GAAV,EAAkD,CAACN,SAAS,CAACM,OAAX,CAAlD;AAEA,4CAAgB;AAAA,WAAMJ,aAAa,CAACF,SAAS,CAACM,OAAX,CAAnB;AAAA,GAAhB;AAEA,SACE;AAAK,IAAA,SAAS,EAAEL,SAAhB;AAA2B,IAAA,GAAG,EAAED;AAAhC,KAA+CH,IAA/C,GACE,gCAAC,0BAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAET,IAAV;AAAgBU,MAAAA,KAAK,EAAEd,QAAvB;AAAiCe,MAAAA,KAAK,EAAEd;AAAxC;AAAhC,KACGF,QADH,CADF,CADF;AAOD,CA7BD;;AA+BAF,aAAa,CAACmB,SAAd,GAA0B;AACxBhB,EAAAA,QAAQ,EAAEiB,sBAAUC,KAAV,CAAgB,EAAhB,CADc;AAExBjB,EAAAA,QAAQ,EAAEgB,sBAAUC,KAAV,CAAgB,EAAhB,CAFc;AAGxBhB,EAAAA,SAAS,EAAEe,sBAAUE;AAHG,CAA1B;AAMAtB,aAAa,CAACuB,YAAd,GAA6B;AAC3BpB,EAAAA,QAAQ,EAAE,EADiB;AAE3BC,EAAAA,QAAQ,EAAE,EAFiB;AAG3BC,EAAAA,SAAS,EAAE;AAHgB,CAA7B;;eAOemB,kBAAMC,IAAN,CAAWzB,aAAX,C","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useWindowScroll } from 'beautiful-react-hooks';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DiagramContext from '../utils/DiagramContext';\n\n/**\n * The DiagramCanvas component provides a context to the Diagram children.\n * The context contains the canvas bounding box (for future calculations) and the port references in order to\n * allow links to easily access to a the ports coordinates\n */\nconst DiagramCanvas = (props) => {\n  const { children, portRefs, nodeRefs, className, ...rest } = props;\n  const [bbox, setBoundingBox] = useState(null);\n  const canvasRef = useRef();\n  const classList = classNames('bi bi-diagram', className);\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = useCallback((el) => {\n    if (el) {\n      const nextBBox = el.getBoundingClientRect();\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox);\n      }\n    }\n  }, [bbox, setBoundingBox]);\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current]);\n  // same on window scroll\n  useWindowScroll(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div className={classList} ref={canvasRef} {...rest}>\n      <DiagramContext.Provider value={{ canvas: bbox, ports: portRefs, nodes: nodeRefs }}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  );\n};\n\nDiagramCanvas.propTypes = {\n  portRefs: PropTypes.shape({}),\n  nodeRefs: PropTypes.shape({}),\n  className: PropTypes.string,\n};\n\nDiagramCanvas.defaultProps = {\n  portRefs: {},\n  nodeRefs: {},\n  className: '',\n};\n\n\nexport default React.memo(DiagramCanvas);\n"],"file":"DiagramCanvas.js"}