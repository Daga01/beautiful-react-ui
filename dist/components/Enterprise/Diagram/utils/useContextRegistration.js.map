{"version":3,"sources":["components/Enterprise/Diagram/utils/useContextRegistration.js"],"names":["usePortRegistration","inputs","outputs","onPortRegister","context","DiagramContext","portId","portElement","canvas","ports","useNodeRegistration","ref","onNodeRegister","id","nodes","current"],"mappings":";;;;;;;AAAA;;AACA;;;;AAMO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAASC,OAAT,EAAkBC,cAAlB,EAAqC;AACtE,MAAMC,OAAO,GAAG,uBAAWC,0BAAX,CAAhB;AAEA,SAAO,wBAAY,UAACC,MAAD,EAASC,WAAT,EAAyB;AAAA,QAClCC,MADkC,GAChBJ,OADgB,CAClCI,MADkC;AAAA,QAC1BC,KAD0B,GAChBL,OADgB,CAC1BK,KAD0B;;AAG1C,QAAID,MAAM,KAAKP,MAAM,IAAIC,OAAf,CAAV,EAAmC;AACjC,UAAIO,KAAK,IAAI,CAACA,KAAK,CAACH,MAAD,CAAnB,EAA6B;AAC3BH,QAAAA,cAAc,CAACG,MAAD,EAASC,WAAT,CAAd;AACD;AACF;AACF,GARM,EAQJ,CAACH,OAAD,EAAUH,MAAV,EAAkBC,OAAlB,CARI,CAAP;AASD,CAZM;;;;AAkBA,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,cAAN,EAAsBC,EAAtB,EAA6B;AAAA,oBACpC,uBAAWR,0BAAX,CADoC;AAAA,MACtDG,MADsD,eACtDA,MADsD;AAAA,MAC9CM,KAD8C,eAC9CA,KAD8C;;AAG9D,wBAAU,YAAM;AACd,QAAIF,cAAc,IAAID,GAAG,CAACI,OAAtB,IAAiCP,MAAjC,IAA2CM,KAA3C,IAAoD,CAACA,KAAK,CAACD,EAAD,CAA9D,EAAoE;AAClED,MAAAA,cAAc,CAACC,EAAD,EAAKF,GAAG,CAACI,OAAT,CAAd;AACD;AACF,GAJD,EAIG,CAACJ,GAAG,CAACI,OAAL,EAAcP,MAAd,EAAsBM,KAAtB,EAA6BF,cAA7B,CAJH;AAKD,CARM","sourcesContent":["import { useCallback, useEffect, useContext } from 'react';\nimport DiagramContext from './DiagramContext';\n\n/**\n * Returns a callback that will perform the onPortRegister function when the context is ready (canvas exists)\n * and there's at least one input or one output\n */\nexport const usePortRegistration = (inputs, outputs, onPortRegister) => {\n  const context = useContext(DiagramContext);\n\n  return useCallback((portId, portElement) => {\n    const { canvas, ports } = context;\n\n    if (canvas && (inputs || outputs)) {\n      if (ports && !ports[portId]) {\n        onPortRegister(portId, portElement);\n      }\n    }\n  }, [context, inputs, outputs]);\n};\n\n/**\n * Takes a dom reference and an onNodeRegister callback and perform the callback when the node is mounted\n * and the canvas is ready\n */\nexport const useNodeRegistration = (ref, onNodeRegister, id) => {\n  const { canvas, nodes } = useContext(DiagramContext);\n\n  useEffect(() => {\n    if (onNodeRegister && ref.current && canvas && nodes && !nodes[id]) {\n      onNodeRegister(id, ref.current);\n    }\n  }, [ref.current, canvas, nodes, onNodeRegister]);\n};\n"],"file":"useContextRegistration.js"}