{"version":3,"sources":["components/Enterprise/Diagram/utils/makeSvgPath.js"],"names":["CURVE_FACTOR","roundPoint","point","Math","floor","getXOffset","alignment","getYOffset","makeSvgPath","startPoint","endPoint","options","type","roundedStart","roundedEnd","start","end","inputAlignment","outputAlignment","startControl","endControl","offsetX","offsetY","ctrl"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG,EAArB;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAW,CAACC,IAAI,CAACC,KAAL,CAAWF,KAAK,CAAC,CAAD,CAAhB,CAAD,EAAuBC,IAAI,CAACC,KAAL,CAAWF,KAAK,CAAC,CAAD,CAAhB,CAAvB,CAAX;AAAA,CAAnB;;AAKA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAe;AAChC,MAAI,CAACA,SAAD,IAAeA,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAAzD,EAAmE,OAAO,CAAP;AACnE,SAAOA,SAAS,KAAK,MAAd,GAAuB,CAACN,YAAxB,GAAuCA,YAA9C;AACD,CAHD;;AAIA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACD,SAAD,EAAe;AAChC,MAAI,CAACA,SAAD,IAAeA,SAAS,KAAK,KAAd,IAAuBA,SAAS,KAAK,QAAxD,EAAmE,OAAO,CAAP;AACnE,SAAOA,SAAS,KAAK,KAAd,GAAsBN,YAAtB,GAAqC,CAACA,YAA7C;AACD,CAHD;;AAQA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAaC,QAAb,EAAuD;AAAA,MAAhCC,OAAgC,uEAAtB;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAsB;AACzE,MAAI,CAACH,UAAD,IAAe,CAACC,QAApB,EAA8B,OAAO,EAAP;AAC9B,MAAMG,YAAY,GAAGZ,UAAU,CAACQ,UAAD,CAA/B;AACA,MAAMK,UAAU,GAAGb,UAAU,CAACS,QAAD,CAA7B;AAEA,MAAMK,KAAK,aAAMF,YAAY,CAAC,CAAD,CAAlB,eAA0BA,YAAY,CAAC,CAAD,CAAtC,CAAX;AACA,MAAMG,GAAG,aAAMF,UAAU,CAAC,CAAD,CAAhB,eAAwBA,UAAU,CAAC,CAAD,CAAlC,CAAT;;AAEA,MAAIH,OAAO,CAACC,IAAR,KAAiB,QAAjB,KAA8BD,OAAO,CAACM,cAAR,IAA0BN,OAAO,CAACO,eAAhE,CAAJ,EAAsF;AACpF,QAAIC,YAAY,GAAGH,GAAnB;AACA,QAAII,UAAU,GAAGL,KAAjB;;AAEA,QAAIJ,OAAO,CAACM,cAAZ,EAA4B;AAC1B,UAAMI,OAAO,GAAGR,YAAY,CAAC,CAAD,CAAZ,GAAkBR,UAAU,CAACM,OAAO,CAACM,cAAT,CAA5C;AACA,UAAMK,OAAO,GAAGT,YAAY,CAAC,CAAD,CAAZ,GAAkBN,UAAU,CAACI,OAAO,CAACM,cAAT,CAA5C;AACAG,MAAAA,UAAU,aAAMC,OAAN,eAAkBC,OAAlB,CAAV;AACD;;AAED,QAAIX,OAAO,CAACO,eAAZ,EAA6B;AAC3B,UAAMG,QAAO,GAAGP,UAAU,CAAC,CAAD,CAAV,GAAgBT,UAAU,CAACM,OAAO,CAACO,eAAT,CAA1C;;AACA,UAAMI,QAAO,GAAGR,UAAU,CAAC,CAAD,CAAV,GAAgBP,UAAU,CAACI,OAAO,CAACO,eAAT,CAA1C;;AACAC,MAAAA,YAAY,aAAME,QAAN,eAAkBC,QAAlB,CAAZ;AACD;;AAED,uBAAYP,KAAZ,gBAAuBK,UAAvB,cAAqCD,YAArC,eAAsDH,GAAtD;AACD;;AAGD,MAAMO,IAAI,aAAMT,UAAU,CAAC,CAAD,CAAhB,eAAwBD,YAAY,CAAC,CAAD,CAApC,CAAV;AAEA,qBAAYE,KAAZ,gBAAuBQ,IAAvB,eAAgCP,GAAhC;AACD,CA/BD;;eAkCeR,W","sourcesContent":["const CURVE_FACTOR = 60;\n\n/**\n * Rounds coordinates\n */\nconst roundPoint = (point) => [Math.floor(point[0]), Math.floor(point[1])];\n\n/**\n * Calculates the offset accordingly to the alignment\n */\nconst getXOffset = (alignment) => {\n  if (!alignment || (alignment !== 'left' && alignment !== 'right')) return 0;\n  return alignment === 'left' ? -CURVE_FACTOR : CURVE_FACTOR;\n};\nconst getYOffset = (alignment) => {\n  if (!alignment || (alignment !== 'top' && alignment !== 'bottom')) return 0;\n  return alignment === 'top' ? CURVE_FACTOR : -CURVE_FACTOR;\n};\n\n/**\n * Given a source point and an output point produces the SVG path between them\n */\nconst makeSvgPath = (startPoint, endPoint, options = { type: 'curve' }) => {\n  if (!startPoint || !endPoint) return '';\n  const roundedStart = roundPoint(startPoint);\n  const roundedEnd = roundPoint(endPoint);\n\n  const start = `${roundedStart[0]}, ${roundedStart[1]}`;\n  const end = `${roundedEnd[0]}, ${roundedEnd[1]}`;\n\n  if (options.type === 'bezier' && (options.inputAlignment || options.outputAlignment)) {\n    let startControl = end;\n    let endControl = start;\n\n    if (options.inputAlignment) {\n      const offsetX = roundedStart[0] + getXOffset(options.inputAlignment);\n      const offsetY = roundedStart[1] + getYOffset(options.inputAlignment);\n      endControl = `${offsetX}, ${offsetY}`;\n    }\n\n    if (options.outputAlignment) {\n      const offsetX = roundedEnd[0] + getXOffset(options.outputAlignment);\n      const offsetY = roundedEnd[1] + getYOffset(options.outputAlignment);\n      startControl = `${offsetX}, ${offsetY}`;\n    }\n\n    return `M ${start} C ${endControl} ${startControl}, ${end}`;\n  }\n\n  // connecting with a standard curve without any alignment\n  const ctrl = `${roundedEnd[0]}, ${roundedStart[1]}`;\n\n  return `M ${start} Q ${ctrl}, ${end}`;\n};\n\n\nexport default makeSvgPath;\n"],"file":"makeSvgPath.js"}