{"version":3,"sources":["components/Enterprise/Diagram/Link/Link.js"],"names":["useContextRefs","canvas","portRefs","nodeRefs","Link","props","input","output","link","onDelete","pathRef","labelPosition","setLabelPosition","classList","readonly","inputPoint","outputPoint","pathOptions","type","inputAlignment","entity","alignment","outputAlignment","path","label","current","pos","onDoubleClick","InvolvedEntity","PropTypes","exact","oneOf","oneOfType","PortType","NodeType","propTypes","LinkType","isRequired","func","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { LinkType, NodeType, PortType } from '../utils/Types';\nimport usePortRefs from '../utils/usePortRefs';\nimport useCanvas from '../utils/useCanvas';\nimport getCoords from './getEntityCoordinates';\nimport { getPathMidpoint, makeSvgPath } from '../../../../shared';\nimport useNodeRefs from '../utils/useNodeRefs';\nimport LinkLabel from './LinkLabel';\n\n// local hook, returns portRefs & nodeRefs\nconst useContextRefs = () => {\n  const canvas = useCanvas();\n  const portRefs = usePortRefs();\n  const nodeRefs = useNodeRefs();\n\n  return { canvas, nodeRefs, portRefs };\n};\n\n/**\n * A Diagram link component displays the link between two diagram nodes or two node ports.\n */\nconst Link = (props) => {\n  const { input, output, link, onDelete } = props;\n  const pathRef = useRef();\n  const [labelPosition, setLabelPosition] = useState();\n  const { canvas, portRefs, nodeRefs } = useContextRefs();\n  const classList = useMemo(() => classNames('bi-diagram-link', { 'readonly-link': link.readonly }), [link.readonly]);\n  const inputPoint = useMemo(() => getCoords(input, portRefs, nodeRefs, canvas), [input, portRefs, nodeRefs, canvas]);\n  // eslint-disable-next-line max-len\n  const outputPoint = useMemo(() => getCoords(output, portRefs, nodeRefs, canvas), [output, portRefs, nodeRefs, canvas]);\n  const pathOptions = {\n    type: (input.type === 'port' || output.type === 'port') ? 'bezier' : 'curve',\n    inputAlignment: input.entity.alignment || null,\n    outputAlignment: output.entity.alignment || null,\n  };\n  const path = useMemo(() => makeSvgPath(inputPoint, outputPoint, pathOptions), [inputPoint, outputPoint]);\n\n  // calculates label position\n  useEffect(() => {\n    if (link.label && inputPoint && outputPoint && pathRef.current) {\n      const pos = getPathMidpoint(pathRef.current);\n      setLabelPosition(pos);\n    }\n  }, [pathRef.current, link.label, inputPoint, outputPoint]);\n\n  // on link delete\n  const onDoubleClick = useCallback(() => {\n    if (onDelete && !link.readonly) {\n      onDelete(link);\n    }\n  }, [link, onDelete]);\n\n  return (\n    <g className={classList}>\n      <path d={path} className=\"bi-link-ghost\" onDoubleClick={onDoubleClick} />\n      <path d={path} ref={pathRef} className=\"bi-link-path\" onDoubleClick={onDoubleClick} />\n      {link.label && labelPosition && (<LinkLabel position={labelPosition} label={link.label} />)}\n    </g>\n  );\n};\n\n\nconst InvolvedEntity = PropTypes.exact({\n  type: PropTypes.oneOf(['node', 'port']),\n  entity: PropTypes.oneOfType([PortType, NodeType]),\n});\n\nLink.propTypes = {\n  link: LinkType.isRequired,\n  input: InvolvedEntity.isRequired,\n  output: InvolvedEntity.isRequired,\n  onDelete: PropTypes.func,\n};\n\nLink.defaultProps = {\n  onDelete: undefined,\n};\n\nexport default React.memo(Link);\n"],"file":"Link.js"}