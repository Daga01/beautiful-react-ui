{"version":3,"sources":["components/Elements/List/List.js"],"names":["assignColor","item","color","React","cloneElement","props","List","memo","condensed","className","children","rest","classList","Children","map","propTypes","Color","PropTypes","bool","defaultProps","Item","ListItem"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAOA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAiBC,kBAAMC,YAAN,CAAmBH,IAAnB,EAAyB;AAAEC,IAAAA,KAAK,EAAED,IAAI,CAACI,KAAL,CAAWH,KAAX,IAAoBA;AAA7B,GAAzB,CAAjB;AAAA,CAApB;;AAMA,IAAMI,IAAI,GAAGH,kBAAMI,IAAN,CAAW,UAACF,KAAD,EAAW;AAAA,MACzBH,KADyB,GAC0BG,KAD1B,CACzBH,KADyB;AAAA,MAClBM,SADkB,GAC0BH,KAD1B,CAClBG,SADkB;AAAA,MACPC,SADO,GAC0BJ,KAD1B,CACPI,SADO;AAAA,MACIC,QADJ,GAC0BL,KAD1B,CACIK,QADJ;AAAA,MACiBC,IADjB,4BAC0BN,KAD1B;;AAEjC,MAAMO,SAAS,GAAG,4BAAW,YAAX,oBAAoCV,KAApC,GAA6C;AAC7D,yBAAqBM;AADwC,GAA7C,EAEfC,SAFe,CAAlB;AAIA,SACE;AAAI,IAAA,SAAS,EAAEG;AAAf,KAA8BD,IAA9B,GACGT,KAAK,GAAGW,gBAASC,GAAT,CAAaJ,QAAb,EAAuB,UAACT,IAAD;AAAA,WAAUD,WAAW,CAACC,IAAD,EAAOC,KAAP,CAArB;AAAA,GAAvB,CAAH,GAAgEQ,QADxE,CADF;AAKD,CAXY,CAAb;;AAcAJ,IAAI,CAACS,SAAL,GAAiB;AAKfb,EAAAA,KAAK,EAAEc,aALQ;AASfR,EAAAA,SAAS,EAAES,sBAAUC;AATN,CAAjB;AAYAZ,IAAI,CAACa,YAAL,GAAoB;AAClBjB,EAAAA,KAAK,EAAE,SADW;AAElBM,EAAAA,SAAS,EAAE;AAFO,CAApB;AAMAF,IAAI,CAACc,IAAL,GAAYC,oBAAZ;eAEef,I","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ListItem from './ListItem';\nimport { Color } from '../../../shared';\n\nimport './list.scss';\n\n/**\n * Clones an item by passing the given color prop, if it doesn't exist yet\n */\nconst assignColor = (item, color) => React.cloneElement(item, { color: item.props.color || color });\n\n/**\n * A List component wraps and formats a series of line items.\n */\n// the React.memo has been used here rather than on the export line like other cases, to avoid wrapping the shortcut.\nconst List = React.memo((props) => {\n  const { color, condensed, className, children, ...rest } = props;\n  const classList = classNames('bi bi-list', `bi-list-${color}`, {\n    'bi-list-condensed': condensed,\n  }, className);\n\n  return (\n    <ul className={classList} {...rest}>\n      {color ? Children.map(children, (item) => assignColor(item, color)) : children}\n    </ul>\n  );\n});\n\n\nList.propTypes = {\n  /*\n   * Defines the list color, can be one of the following:\n   * `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`.\n   */\n  color: Color,\n  /*\n   * Shrinks the list items so that it's possible to display more information\n   */\n  condensed: PropTypes.bool,\n};\n\nList.defaultProps = {\n  color: 'default',\n  condensed: false,\n};\n\n// shortcut to ListItem so that we can use it as the following: `List.Item`\nList.Item = ListItem;\n\nexport default List;\n"],"file":"List.js"}