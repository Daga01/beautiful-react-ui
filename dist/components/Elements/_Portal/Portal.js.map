{"version":3,"sources":["../../../../src/components/Elements/_Portal/Portal.js"],"names":["Portal","id","children","wrapper","innerHTML","remove","propTypes","PropTypes","string","isRequired","node"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAKA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAsB;AAAA,MAAnBC,EAAmB,QAAnBA,EAAmB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACnC,MAAMC,OAAO,GAAG,kCAAiBF,EAAjB,CAAhB;AAMA,wBAAU;AAAA,WAAM,YAAM;AACpB,UAAIE,OAAO,IAAIA,OAAO,CAACC,SAAR,KAAsB,EAArC,EAAyC;AACvCD,QAAAA,OAAO,CAACE,MAAR;AACD;AACF,KAJS;AAAA,GAAV,EAIG,EAJH;AAMA,SAAO,4BAAaH,QAAb,EAAuBC,OAAvB,CAAP;AACD,CAdD;;AAgBAH,MAAM,CAACM,SAAP,GAAmB;AAIjBL,EAAAA,EAAE,EAAEM,sBAAUC,MAAV,CAAiBC,UAJJ;AAQjBP,EAAAA,QAAQ,EAAEK,sBAAUG;AARH,CAAnB;eAWeV,M","sourcesContent":["import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport getPortalWrapper from './getPortalWrapper';\n\n/**\n * Create a React with the given id\n */\nconst Portal = ({ id, children }) => {\n  const wrapper = getPortalWrapper(id);\n\n  /**\n   * the following effect returns a clean-up function to be performed\n   * on component will unmount, if the given wrapper is empty then remove it.\n   */\n  useEffect(() => () => {\n    if (wrapper && wrapper.innerHTML === '') {\n      wrapper.remove();\n    }\n  }, []);\n\n  return createPortal(children, wrapper);\n};\n\nPortal.propTypes = {\n  /**\n   * the id of the portal wrapper\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n};\n\nexport default Portal;\n"],"file":"Portal.js"}