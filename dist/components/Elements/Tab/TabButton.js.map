{"version":3,"sources":["../../../../src/components/Elements/Tab/TabButton.js"],"names":["TabButton","props","title","icon","active","index","onChange","disabled","clickOrKeyDownHandler","propTypes","PropTypes","number","bool","func","isRequired","oneOfType","string","IconProp","defaultProps","undefined","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAQA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA,MACnBC,KADmB,GACgCD,KADhC,CACnBC,KADmB;AAAA,MACZC,IADY,GACgCF,KADhC,CACZE,IADY;AAAA,MACNC,MADM,GACgCH,KADhC,CACNG,MADM;AAAA,MACEC,KADF,GACgCJ,KADhC,CACEI,KADF;AAAA,MACSC,QADT,GACgCL,KADhC,CACSK,QADT;AAAA,MACmBC,QADnB,GACgCN,KADhC,CACmBM,QADnB;;AAI3B,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAI,CAACD,QAAL,EAAe;AACbD,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,GAJD;;AAMA,SACE;AAAI,IAAA,SAAS,EAAE,4BAAW;AAAE,yBAAmBD,MAAM,KAAKC,KAAhC;AAAuC,sBAAgBE;AAAvD,KAAX;AAAf,KAGE;AAAG,IAAA,OAAO,EAAEC,qBAAZ;AAAmC,IAAA,SAAS,EAAEA,qBAA9C;AAAqE,IAAA,IAAI,EAAC,QAA1E;AAAmF,IAAA,QAAQ,EAAE;AAA7F,KACG,CAAC,CAACN,KAAF,IACC,kEACG,CAAC,CAACC,IAAF,IAAU,8BAAiBA,IAAjB,CADb,EAEE;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGD,KADH,CAFF,CAFJ,EASG,CAACA,KAAD,IACC,kEACI,CAAC,CAACC,IAAF,IAAU,8BAAiBA,IAAjB,CAAX,IAAsC,0DADzC,CAVJ,CAHF,CADF;AAsBD,CAhCD;;AAkCAH,SAAS,CAACS,SAAV,GAAsB;AAIpBJ,EAAAA,KAAK,EAAEK,sBAAUC,MAJG;AAQpBJ,EAAAA,QAAQ,EAAEG,sBAAUE,IARA;AAYpBN,EAAAA,QAAQ,EAAEI,sBAAUG,IAAV,CAAeC,UAZL;AAgBpBV,EAAAA,MAAM,EAAEM,sBAAUK,SAAV,CAAoB,CAC1BL,sBAAUC,MADgB,EAE1BD,sBAAUM,MAFgB,CAApB,EAGLF,UAnBiB;AAuBpBZ,EAAAA,KAAK,EAAEQ,sBAAUM,MAvBG;AA2BpBb,EAAAA,IAAI,EAAEc;AA3Bc,CAAtB;AA8BAjB,SAAS,CAACkB,YAAV,GAAyB;AACvBb,EAAAA,KAAK,EAAE,CADgB;AAEvBE,EAAAA,QAAQ,EAAE,KAFa;AAGvBL,EAAAA,KAAK,EAAE,IAHgB;AAIvBC,EAAAA,IAAI,EAAEgB;AAJiB,CAAzB;;eAOeC,kBAAMC,IAAN,CAAWrB,SAAX,C","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { makeIconFromProp, IconProp } from '../../../shared';\n\n\n/**\n * Tab button is a component used to show the tab's label.\n * A label could have a title or title plus icon or icon only.\n * If neither title nor icon are defined the component will show 'no title' as a label.\n */\nconst TabButton = (props) => {\n  const { title, icon, active, index, onChange, disabled } = props;\n\n  // local handler\n  const clickOrKeyDownHandler = () => {\n    if (!disabled) {\n      onChange(index);\n    }\n  };\n\n  return (\n    <li className={classNames({ 'tab-btn-current': active === index, 'tab-disabled': disabled })}>\n      {/* The following eslint rule has been disabled so that we can use <a> as button tag. */}\n      {/* eslint-disable jsx-a11y/anchor-is-valid */}\n      <a onClick={clickOrKeyDownHandler} onKeyDown={clickOrKeyDownHandler} role=\"button\" tabIndex={0}>\n        {!!title && (\n          <>\n            {!!icon && makeIconFromProp(icon)}\n            <span className=\"tab-title\">\n              {title}\n            </span>\n          </>\n        )}\n        {!title && (\n          <>\n            {(!!icon && makeIconFromProp(icon)) || <span>no  title</span>}\n          </>\n        )}\n      </a>\n      {/* eslint-enable jsx-a11y/anchor-is-valid */}\n    </li>\n  );\n};\n\nTabButton.propTypes = {\n  /**\n   * Index is the internal index to identify which is the active label\n   */\n  index: PropTypes.number,\n  /**\n   * Disable is used to define which label should be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n  * The callback to be performed on content change\n  */\n  onChange: PropTypes.func.isRequired,\n  /**\n  * Defines the current active tab index\n  */\n  active: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n  /**\n   * Title is the string that will be used as tab label\n   */\n  title: PropTypes.string,\n  /**\n   * Define tab icon\n  */\n  icon: IconProp,\n};\n\nTabButton.defaultProps = {\n  index: 0,\n  disabled: false,\n  title: null,\n  icon: undefined,\n};\n\nexport default React.memo(TabButton);\n"],"file":"TabButton.js"}