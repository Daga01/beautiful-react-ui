{"version":3,"sources":["components/Elements/Breadcrumbs/BreadcrumbMenu.js"],"names":["BreadcrumbMenu","props","items","shown","setIsShown","Trigger","onToggleHandler","map","item","render","path","icon","label","propTypes","PropTypes","arrayOf","shape","string","IconProp","func","isRequired"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAMA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAAA,MACxBC,KADwB,GACdD,KADc,CACxBC,KADwB;;AAAA,kBAEJ,qBAAS,KAAT,CAFI;AAAA;AAAA,MAEzBC,KAFyB;AAAA,MAElBC,UAFkB;;AAIhC,MAAMC,OAAO,GACX,gCAAC,kBAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,KAAK,EAAC,aAAhC;AAA8C,IAAA,OAAO,MAArD;AAAsD,IAAA,IAAI,EAAC,OAA3D;AAAmE,IAAA,SAAS,EAAC;AAA7E,IADF;;AAIA,MAAMC,eAAe,GAAG,wBAAY,YAAM;AACxCF,IAAAA,UAAU,CAAC,CAACD,KAAF,CAAV;AACD,GAFuB,EAErB,CAACA,KAAD,CAFqB,CAAxB;AAIA,SACE;AAAI,IAAA,SAAS,EAAC;AAAd,KACE,gCAAC,oBAAD;AAAU,IAAA,OAAO,EAAEE,OAAnB;AAA4B,IAAA,OAAO,EAAEF,KAArC;AAA4C,IAAA,QAAQ,EAAEG,eAAtD;AAAuE,IAAA,SAAS,EAAC;AAAjF,KACGJ,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD,EAAU;AACnB,QAAIA,IAAI,CAACC,MAAT,EAAiB;AACf,aAAOD,IAAI,CAACC,MAAL,EAAP;AACD;;AAED,WAAO,gCAAC,oBAAD,CAAU,IAAV;AAAe,MAAA,IAAI,EAAED,IAAI,CAACE,IAA1B;AAAgC,MAAA,IAAI,EAAEF,IAAI,CAACG;AAA3C,OAAkDH,IAAI,CAACI,KAAvD,CAAP;AACD,GANA,CADH,CADF,CADF;AAaD,CAzBD;;AA4BAZ,cAAc,CAACa,SAAf,GAA2B;AAIzBX,EAAAA,KAAK,EAAEY,sBAAUC,OAAV,CAAkBD,sBAAUE,KAAV,CAAgB;AACvCN,IAAAA,IAAI,EAAEI,sBAAUG,MADuB;AAEvCL,IAAAA,KAAK,EAAEE,sBAAUG,MAFsB;AAGvCN,IAAAA,IAAI,EAAEO,gBAHiC;AAIvCT,IAAAA,MAAM,EAAEK,sBAAUK;AAJqB,GAAhB,CAAlB,EAKHC;AATqB,CAA3B;eAaepB,c","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport { IconProp } from '../../../shared';\nimport DropDown from '../DropDown';\n\n/**\n * BreadcrumbHiddenItems is a sub-component of Breadcrumbs.\n * It handle the business-logic of the hidden breadcrumbs list.\n */\nconst BreadcrumbMenu = (props) => {\n  const { items } = props;\n  const [shown, setIsShown] = useState(false);\n\n  const Trigger = (\n    <Button icon=\"ellipsis-v\" color=\"transparent\" outline size=\"small\" className=\"bi-breadcrumbs-menu-button\" />\n  );\n\n  const onToggleHandler = useCallback(() => {\n    setIsShown(!shown);\n  }, [shown]);\n\n  return (\n    <li className=\"bi breadcrumb-item breadcrumb-menu\">\n      <DropDown trigger={Trigger} isShown={shown} onToggle={onToggleHandler} placement=\"bottom-left\">\n        {items.map((item) => {\n          if (item.render) {\n            return item.render();\n          }\n\n          return <DropDown.Link href={item.path} icon={item.icon}>{item.label}</DropDown.Link>;\n        })}\n      </DropDown>\n    </li>\n  );\n};\n\n\nBreadcrumbMenu.propTypes = {\n  /**\n   * Defines the items to be shown within a dropdown menu\n   */\n  items: PropTypes.arrayOf(PropTypes.shape({\n    path: PropTypes.string,\n    label: PropTypes.string,\n    icon: IconProp,\n    render: PropTypes.func,\n  })).isRequired,\n};\n\n\nexport default BreadcrumbMenu;\n"],"file":"BreadcrumbMenu.js"}