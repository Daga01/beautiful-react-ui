{"version":3,"sources":["components/Elements/Popover/Popover.js"],"names":["Popover","props","trigger","isOpen","onToggle","action","title","placement","children","className","rest","propTypes","PropTypes","node","isRequired","func","bool","oneOf","string","Placement","defaultProps","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAQA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,MACjBC,OADiB,GACqED,KADrE,CACjBC,OADiB;AAAA,MACRC,MADQ,GACqEF,KADrE,CACRE,MADQ;AAAA,MACAC,QADA,GACqEH,KADrE,CACAG,QADA;AAAA,MACUC,MADV,GACqEJ,KADrE,CACUI,MADV;AAAA,MACkBC,KADlB,GACqEL,KADrE,CACkBK,KADlB;AAAA,MACyBC,SADzB,GACqEN,KADrE,CACyBM,SADzB;AAAA,MACoCC,QADpC,GACqEP,KADrE,CACoCO,QADpC;AAAA,MAC8CC,SAD9C,GACqER,KADrE,CAC8CQ,SAD9C;AAAA,MAC4DC,IAD5D,4BACqET,KADrE;;AAGzB,SACE,gCAAC,2BAAD;AACE,IAAA,OAAO,EAAEC,OADX;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,OAAO,EAAED,MAHX;AAIE,IAAA,MAAM,EAAEE,MAJV;AAKE,IAAA,SAAS,EAAEE,SALb;AAME,IAAA,MAAM,EAAE;AANV,KAQE;AAAK,IAAA,SAAS,EAAE,4BAAW,eAAX,EAA4BE,SAA5B;AAAhB,KAA4DC,IAA5D,GACGJ,KAAK,IAAK;AAAI,IAAA,SAAS,EAAC;AAAd,KAAkCA,KAAlC,CADb,EAEGE,QAFH,CARF,CADF;AAeD,CAlBD;;AAqBAR,OAAO,CAACW,SAAR,GAAoB;AAIlBT,EAAAA,OAAO,EAAEU,sBAAUC,IAAV,CAAeC,UAJN;AASlBV,EAAAA,QAAQ,EAAEQ,sBAAUG,IAAV,CAAeD,UATP;AAalBX,EAAAA,MAAM,EAAES,sBAAUI,IAbA;AAiBlBX,EAAAA,MAAM,EAAEO,sBAAUK,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CAjBU;AAqBlBX,EAAAA,KAAK,EAAEM,sBAAUM,MArBC;AAyBlBX,EAAAA,SAAS,EAAEY;AAzBO,CAApB;AA4BAnB,OAAO,CAACoB,YAAR,GAAuB;AACrBjB,EAAAA,MAAM,EAAE,KADa;AAErBE,EAAAA,MAAM,EAAE,OAFa;AAGrBC,EAAAA,KAAK,EAAE,IAHc;AAIrBC,EAAAA,SAAS,EAAE;AAJU,CAAvB;;eAOec,kBAAMC,IAAN,CAAWtB,OAAX,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FloatingContent from '../FloatingContent';\nimport { Placement } from '../../../shared';\n\nimport './popover.scss';\n\n/**\n * A Popover component is a transient balloon showing its content floating on a given trigger\n * (possibly another component).\n */\nconst Popover = (props) => {\n  const { trigger, isOpen, onToggle, action, title, placement, children, className, ...rest } = props;\n\n  return (\n    <FloatingContent\n      trigger={trigger}\n      onToggle={onToggle}\n      isShown={isOpen}\n      action={action}\n      placement={placement}\n      offset={10}\n    >\n      <div className={classNames('bi bi-popover', className)} {...rest}>\n        {title && (<h2 className=\"bi-popover-title\">{title}</h2>)}\n        {children}\n      </div>\n    </FloatingContent>\n  );\n};\n\n\nPopover.propTypes = {\n  /**\n   * Defines the React node to apply the popover to\n   */\n  trigger: PropTypes.node.isRequired,\n  /**\n   * Defines the callback to be performed each time the event defined by the `action` prop fires,\n   * by default a `click` event\n   */\n  onToggle: PropTypes.func.isRequired,\n  /**\n   * Defines whether the popover is shown or not\n   */\n  isOpen: PropTypes.bool,\n  /**\n   * Defines when to fire the onToggle callback, it can be `click` or `hover`\n   */\n  action: PropTypes.oneOf(['click', 'hover']),\n  /**\n   * Define the possible popup title\n   */\n  title: PropTypes.string,\n  /**\n   * Defines the popup placement\n   */\n  placement: Placement,\n};\n\nPopover.defaultProps = {\n  isOpen: false,\n  action: 'click',\n  title: null,\n  placement: 'top-center',\n};\n\nexport default React.memo(Popover);\n"],"file":"Popover.js"}