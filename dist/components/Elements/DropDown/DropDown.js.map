{"version":3,"sources":["components/Elements/DropDown/DropDown.js"],"names":["DropDown","React","memo","props","trigger","placement","isShown","onToggle","pointingArrow","children","className","rest","classList","propTypes","PropTypes","node","isRequired","bool","func","Placement","defaultProps","Button","DropDownButton","Link","DropDownLink","Divider","DropDownDivider"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAUA,IAAMA,QAAQ,GAAGC,kBAAMC,IAAN,CAAW,UAACC,KAAD,EAAW;AAAA,MAC7BC,OAD6B,GAC0DD,KAD1D,CAC7BC,OAD6B;AAAA,MACpBC,SADoB,GAC0DF,KAD1D,CACpBE,SADoB;AAAA,MACTC,OADS,GAC0DH,KAD1D,CACTG,OADS;AAAA,MACAC,QADA,GAC0DJ,KAD1D,CACAI,QADA;AAAA,MACUC,aADV,GAC0DL,KAD1D,CACUK,aADV;AAAA,MACyBC,QADzB,GAC0DN,KAD1D,CACyBM,QADzB;AAAA,MACmCC,SADnC,GAC0DP,KAD1D,CACmCO,SADnC;AAAA,MACiDC,IADjD,4BAC0DR,KAD1D;;AAErC,MAAMS,SAAS,GAAG,4BAAW,IAAX,EAAiB,aAAjB,EAAgC;AAChD,mBAAeJ;AADiC,GAAhC,EAEfE,SAFe,CAAlB;AAIA,SACE,gCAAC,2BAAD;AAAiB,IAAA,OAAO,EAAEN,OAA1B;AAAmC,IAAA,SAAS,EAAEC,SAA9C;AAAyD,IAAA,OAAO,EAAEC,OAAlE;AAA2E,IAAA,QAAQ,EAAEC;AAArF,KACE;AAAK,IAAA,SAAS,EAAEK;AAAhB,KAA+BD,IAA/B,GACE,4CACGF,QADH,CADF,CADF,CADF;AASD,CAfgB,CAAjB;;AAkBAT,QAAQ,CAACa,SAAT,GAAqB;AAInBT,EAAAA,OAAO,EAAEU,sBAAUC,IAAV,CAAeC,UAJL;AAQnBV,EAAAA,OAAO,EAAEQ,sBAAUG,IARA;AAYnBV,EAAAA,QAAQ,EAAEO,sBAAUI,IAAV,CAAeF,UAZN;AAgBnBX,EAAAA,SAAS,EAAEc,iBAhBQ;AAoBnBX,EAAAA,aAAa,EAAEM,sBAAUG;AApBN,CAArB;AAwBAjB,QAAQ,CAACoB,YAAT,GAAwB;AACtBd,EAAAA,OAAO,EAAE,KADa;AAEtBD,EAAAA,SAAS,EAAE,eAFW;AAGtBG,EAAAA,aAAa,EAAE;AAHO,CAAxB;AAOAR,QAAQ,CAACqB,MAAT,GAAkBC,0BAAlB;AACAtB,QAAQ,CAACuB,IAAT,GAAgBC,wBAAhB;AACAxB,QAAQ,CAACyB,OAAT,GAAmBC,2BAAnB;eAEe1B,Q","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FloatingContent from '../FloatingContent';\nimport DropDownButton from './DropDownButton';\nimport DropDownLink from './DropDownLink';\nimport DropDownDivider from './DropDownDivider';\nimport { Placement } from '../../../shared';\n\nimport './dropdown.scss';\n\n/**\n * `DropDown` is a controlled component that facilitates the creation of floating menus in proximity a given trigger.\n *\n * Unlike the FloatingContent or the Popover components, it is strictly designed for buttons, links or dividers.\n */\n// the React.memo has been used here rather than on the export line like other cases, to avoid wrapping the shortcut.\nconst DropDown = React.memo((props) => {\n  const { trigger, placement, isShown, onToggle, pointingArrow, children, className, ...rest } = props;\n  const classList = classNames('bi', 'bi-dropdown', {\n    'bi-dd-arrow': pointingArrow,\n  }, className);\n\n  return (\n    <FloatingContent trigger={trigger} placement={placement} isShown={isShown} onToggle={onToggle}>\n      <div className={classList} {...rest}>\n        <ul>\n          {children}\n        </ul>\n      </div>\n    </FloatingContent>\n  );\n});\n\n\nDropDown.propTypes = {\n  /**\n   * Defines the React node to apply the dropdown to\n   */\n  trigger: PropTypes.node.isRequired,\n  /**\n   * Defines whether the dropdown is shown or not\n   */\n  isShown: PropTypes.bool,\n  /**\n   * Defines the callback to be performed when clicking on the given toggle,\n   */\n  onToggle: PropTypes.func.isRequired,\n  /**\n   * Defines the dropdown placement\n   */\n  placement: Placement,\n  /**\n   * Defines whether or not the dropdown should show a pointing arrow\n   */\n  pointingArrow: PropTypes.bool,\n};\n\n\nDropDown.defaultProps = {\n  isShown: false,\n  placement: 'bottom-center',\n  pointingArrow: true,\n};\n\n// shortcuts\nDropDown.Button = DropDownButton;\nDropDown.Link = DropDownLink;\nDropDown.Divider = DropDownDivider;\n\nexport default DropDown;\n"],"file":"DropDown.js"}