{"version":3,"sources":["../../../../src/components/Elements/Placeholder/Placeholder.js"],"names":["Placeholder","paragraphs","image","title","className","rest","classList","Array","from","length","map","und","index","propTypes","PropTypes","number","bool","oneOf","defaultProps","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAOA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAsD;AAAA,MAAnDC,UAAmD,QAAnDA,UAAmD;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAXC,IAAW;;AACxE,MAAMC,SAAS,GAAG,4BAAW,mBAAX,EAAgC;AAChD,uBAAmB,CAAC,CAACJ,KAD2B;AAEhD,mBAAeA,KAAK,KAAK;AAFuB,GAAhC,EAGfE,SAHe,CAAlB;AAKA,SACE;AAAK,IAAA,SAAS,EAAEE;AAAhB,KAA+BD,IAA/B,GACGH,KAAK,IAAK;AAAM,IAAA,SAAS,EAAC;AAAhB,IADb,EAEE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGC,KAAK,IAAI;AAAM,IAAA,SAAS,EAAC;AAAhB,IADZ,EAEGI,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAER;AAAV,GAAX,EAAmCS,GAAnC,CAAuC,UAACC,GAAD,EAAMC,KAAN;AAAA,WAItC;AAAM,MAAA,GAAG,gBAASA,KAAT,CAAT;AAA2B,MAAA,SAAS,EAAC;AAArC,MAJsC;AAAA,GAAvC,CAFH,CAFF,CADF;AAcD,CApBD;;AAsBAZ,WAAW,CAACa,SAAZ,GAAwB;AAItBZ,EAAAA,UAAU,EAAEa,sBAAUC,MAJA;AAQtBZ,EAAAA,KAAK,EAAEW,sBAAUE,IARK;AAYtBd,EAAAA,KAAK,EAAEY,sBAAUG,KAAV,CAAgB,CAAC,IAAD,EAAO,KAAP,EAAc,SAAd,EAAyB,QAAzB,CAAhB;AAZe,CAAxB;AAeAjB,WAAW,CAACkB,YAAZ,GAA2B;AACzBjB,EAAAA,UAAU,EAAE,CADa;AAEzBE,EAAAA,KAAK,EAAE,KAFkB;AAGzBD,EAAAA,KAAK,EAAE;AAHkB,CAA3B;;eAMeiB,kBAAMC,IAAN,CAAWpB,WAAX,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './placeholder.scss';\n\n/**\n * A placeholder component is used in place of a content that will soon appear within the layout.\n */\nconst Placeholder = ({ paragraphs, image, title, className, ...rest }) => {\n  const classList = classNames('bi bi-placeholder', {\n    'img-placeholder': !!image,\n    'img-rounded': image === 'rounded',\n  }, className);\n\n  return (\n    <div className={classList} {...rest}>\n      {image && (<span className=\"bi-placeholder-img\" />)}\n      <div className=\"bi-placeholder-parag-wrapper\">\n        {title && <span className=\"bi-placeholder-title\" />}\n        {Array.from({ length: paragraphs }).map((und, index) => (\n          // this is the only way to assign a key to the generated span component, for this reason\n          // I'm are disabling the following ESLint rule.\n          // eslint-disable-next-line react/no-array-index-key\n          <span key={`par-${index}`} className=\"bi-placeholder-paragraph\" />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nPlaceholder.propTypes = {\n  /**\n   * Defines the number of paragraphs to shown\n   */\n  paragraphs: PropTypes.number,\n  /**\n   * Defines if the component should hold place for a title\n   */\n  title: PropTypes.bool,\n  /**\n   * Defines if the component should hold place for an image\n   */\n  image: PropTypes.oneOf([true, false, 'rounded', 'square']),\n};\n\nPlaceholder.defaultProps = {\n  paragraphs: 1,\n  title: false,\n  image: false,\n};\n\nexport default React.memo(Placeholder);\n"],"file":"Placeholder.js"}