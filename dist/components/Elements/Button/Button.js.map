{"version":3,"sources":["components/Elements/Button/Button.js"],"names":["Button","props","type","fluid","color","rounded","outline","disabled","size","icon","hover","spinner","onClick","pill","className","children","rest","lastChild","firstChild","classList","Pill","propTypes","Color","Size","PropTypes","bool","oneOf","oneOfType","func","IconProp","instanceOf","Spinner","PillProp","node","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Spinner from '../Spinner';\nimport Pill from '../Pill';\nimport {\n  makeIconFromProp,\n  makeCallback,\n  emptyChildren,\n  getLastChild,\n  getFirstChild,\n  makeSpinnerFromProp,\n  makePillFromProp,\n  Size,\n  Color,\n  IconProp,\n  PillProp,\n} from '../../../shared';\n\nimport './button.scss';\n\n/**\n * Button components are used to provide a visual indication user actions.\n */\nconst Button = (props) => {\n  const {\n    type, fluid, color, rounded, outline, disabled, size, icon, hover, spinner, onClick, pill,\n    className, children, ...rest\n  } = props;\n\n  const lastChild = getLastChild(children);\n  const firstChild = getFirstChild(children);\n\n  const classList = classNames('bi bi-btn', `btn-${color}`, {\n    'btn-fluid': fluid,\n    'btn-outline': outline,\n    'btn-rounded': rounded,\n    'btn-he-zoom': hover === 'zoom',\n    'btn-he-float': hover === 'float' || hover === true,\n    'btn-he-shrink': hover === 'shrink',\n    'btn-he-refl': hover === 'reflection',\n    'btn-he-rnd': hover === 'round',\n    'btn-sm': size === 'small',\n    'btn-lg': size === 'large',\n    'btn-icon-only': emptyChildren(children),\n    'btn-lci': lastChild && typeof lastChild !== 'string',\n    'btn-fcp': firstChild && firstChild.type === Pill,\n  }, className);\n\n  return (\n    // it is quite safe to disable the following Eslint rule as the button type is guaranteed by the defaultProp\n    // eslint-disable-next-line react/button-has-type\n    <button disabled={disabled} type={type} onClick={makeCallback(onClick)} className={classList} {...rest}>\n      <>\n        {/* Generate icon if exists */}\n        {!!icon && makeIconFromProp(icon)}\n        {/* Generate spinner if exists */}\n        {!!spinner && makeSpinnerFromProp(spinner, { size })}\n        {/* Generate pill if exists */}\n        {children}\n        {!!pill && makePillFromProp(pill)}\n      </>\n    </button>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * Defines the button color, can be `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`\n   * or `transparent`\n   */\n  color: Color,\n  /**\n   * Defines the button's size, can be `small`, `default`, `large`\n   */\n  size: Size,\n  /**\n   * Shows the outlines only\n   */\n  outline: PropTypes.bool,\n  /**\n   * Makes the button rounded\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Defines the button's type\n   */\n  type: PropTypes.oneOf(['submit', 'button', 'reset']),\n  /**\n   * Disables the button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Makes the button completely fluid (full width)\n   */\n  fluid: PropTypes.bool,\n  /**\n   * Defines the hover effect, can be `round`, `zoom`,  `shrink`,  `float`, `reflection`\n   */\n  hover: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['round', 'zoom', 'shrink', 'float', 'reflection']),\n  ]),\n  /**\n   * Attaches a callback to the 'click' event\n   */\n  onClick: PropTypes.func,\n  /**\n   * Shows an icon, you can pass both a valid Icon component name prop or the instance of an Icon component\n   */\n  icon: IconProp,\n  /**\n   * Shows a spinner icon within the button. The prop value can be \"true\" to show a standard <Spinner />\n   * or the actual instance of a <Spinner /> component.\n   * If the prop value is \"false\" or any falsy value (undefined or null) the spinner won't show.\n   */\n  spinner: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.instanceOf(Spinner),\n  ]),\n  /**\n   * Show a pill into the button. You can pass both a valid pill label prop or the instance of an pill component\n   */\n  pill: PillProp,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n};\n\nButton.defaultProps = {\n  color: 'default',\n  size: 'default',\n  rounded: false,\n  outline: false,\n  fluid: false,\n  type: 'button',\n  disabled: false,\n  hover: undefined,\n  icon: undefined,\n  spinner: false,\n  onClick: null,\n  pill: undefined,\n  children: null,\n};\n\nexport default React.memo(Button);\n"],"file":"Button.js"}