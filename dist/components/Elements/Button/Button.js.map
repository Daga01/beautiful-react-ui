{"version":3,"sources":["../../../../src/components/Elements/Button/Button.js"],"names":["Button","props","children","type","block","color","rounded","outline","disabled","size","icon","hover","spinner","onClick","className","id","style","lastChild","classList","propTypes","BaseProps","Color","Size","PropTypes","bool","oneOf","oneOfType","func","string","arrayOf","instanceOf","Icon","Spinner","node","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../Icon';\nimport Spinner from '../Spinner';\nimport {\n  makeIconFromProp,\n  makeCallback,\n  emptyChildren,\n  getLastChild,\n  makeSpinnerFromProp,\n  BaseProps,\n  Size,\n  Color,\n} from '../../../shared';\n\nimport './button.scss';\n\n/**\n * A Button component is used for actions in forms, dialogs, and more. <br />\n * It comes with support for multiple sizes, colors, and more.\n */\nconst Button = (props) => {\n  const {\n    children, type, block, color, rounded, outline, disabled, size, icon, hover, spinner, onClick, className, id, style,\n  } = props;\n\n  const lastChild = getLastChild(children);\n\n  const classList = classNames('bi bi-btn', `btn-${color}`, {\n    'btn-block': block,\n    'btn-outline': outline,\n    'btn-rounded': rounded,\n    'btn-he-zoom': hover === 'zoom',\n    'btn-he-float': hover === 'float' || hover === true,\n    'btn-he-shrink': hover === 'shrink',\n    'btn-he-refl': hover === 'reflection',\n    'btn-he-rnd': hover === 'round',\n    'btn-sm': size === 'small',\n    'btn-lg': size === 'large',\n    'btn-icon-only': emptyChildren(children),\n    'btn-lci': lastChild && typeof lastChild !== 'string',\n  }, className);\n\n  return (\n    /* eslint-disable-next-line react/button-has-type */\n    <button id={id} disabled={disabled} type={type} onClick={makeCallback(onClick)} className={classList} style={style}>\n      {/* Generate icon if exists */}\n      {!!icon && makeIconFromProp(icon)}\n      {/* Generate spinner if exists */}\n      {!!spinner && makeSpinnerFromProp(spinner, { size })}\n      {children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  ...BaseProps,\n  /**\n   * Defines the button color, can be `default`, `primary`, `secondary`, `info`, `warning`, `success`, `error`\n   * or `transparent`\n   * @default \"default\"\n   */\n  color: Color,\n  /**\n   * Defines the button's size, can be `small`, `default`, `large`\n   * @default \"default\"\n   */\n  size: Size,\n  /**\n   * Shows the outlines only\n   * @default false\n   */\n  outline: PropTypes.bool,\n  /**\n   * Makes the button rounded\n   * @default false\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Defines the button's type\n   * @default 'button'\n   */\n  type: PropTypes.oneOf(['submit', 'button', 'reset']),\n  /**\n   * Disables the button\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Makes the button completely fluid (full width)\n   * @default false\n   */\n  block: PropTypes.bool,\n  /**\n   * Defines the hover effect, can be `round`, `zoom`,  `shrink`,  `float`, `reflection`\n   * @default undefined\n   */\n  hover: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['round', 'zoom', 'shrink', 'float', 'reflection']),\n  ]),\n  /**\n   * Attaches a callback on the 'click' event\n   * @default (event) => undefined\n   */\n  onClick: PropTypes.func,\n  /**\n   * Shows an icon, you can pass both a valid Icon component name prop or the instance of an Icon component\n   * @default undefined\n   */\n  icon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.instanceOf(Icon),\n  ]),\n  /**\n   * Shows a spinner icon within the button. The prop value can be \"true\" to show a standard <Spinner />\n   * or the actual instance of a <Spinner /> component.\n   * If the prop value is \"false\" or any falsy value (undefined or null) the spinner won't show.\n   * @default false\n   */\n  spinner: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.instanceOf(Spinner),\n  ]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n};\n\nButton.defaultProps = {\n  color: 'default',\n  size: 'default',\n  rounded: false,\n  outline: false,\n  block: false,\n  type: 'button',\n  disabled: false,\n  hover: undefined,\n  icon: undefined,\n  spinner: false,\n  onClick: null,\n  children: null,\n};\n\nexport default React.memo(Button);\n"],"file":"Button.js"}