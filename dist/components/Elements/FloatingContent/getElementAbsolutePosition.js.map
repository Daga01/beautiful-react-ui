{"version":3,"sources":["../../../../src/components/Elements/FloatingContent/getElementAbsolutePosition.js"],"names":["getCenterPosition","coordinates","bodyWidth","x","width","getRightPosition","getLeftPosition","getTopPosition","bodyHeight","element","offset","offsetTop","getBottomPosition","coord","elem","height","getElementAbsolutePosition","placement","setWidth","document","body","clientHeight","clientWidth","bottom","right","left","transform","boundingClientRect","children","length","getBoundingClientRect"],"mappings":"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","sourcesContent":["const getCenterPosition = (coordinates, bodyWidth) => bodyWidth - coordinates.x - (coordinates.width / 2);\n\nconst getRightPosition = (coordinates, bodyWidth) => bodyWidth - coordinates.x - coordinates.width;\n\nconst getLeftPosition = (coordinates) => coordinates.x;\n\nconst getTopPosition = (bodyHeight, element, offset) => bodyHeight - element.offsetTop - offset;\n\nconst getBottomPosition = (bodyHeight, coord, elem, offset) => bodyHeight - elem.offsetTop - coord.height - offset;\n\n/**\n * Returns the absolute position of a given HTML element to the document.\n */\nconst getElementAbsolutePosition = (element, placement = 'top-center', offset = 10, setWidth = false) => {\n  const { clientHeight, clientWidth } = document.body;\n  let bottom;\n  let right;\n  let left;\n  let transform;\n\n  /**\n   * As we assume the span is wrapping a React component, we try to get its bounding client rect by accessing the span's\n   * children from the `element.children` property, if it is not available or is empty we then use the span itself to\n   * get the bounding client rect.\n   */\n  const boundingClientRect = element.children.length !== 0\n    ? element.children[0].getBoundingClientRect()\n    : element.getBoundingClientRect();\n\n  switch (placement) {\n    case 'top-left':\n      bottom = getTopPosition(clientHeight, element, offset);\n      left = getLeftPosition(boundingClientRect);\n      break;\n    case 'top-center':\n    default:\n      bottom = getTopPosition(clientHeight, element, offset);\n      right = getCenterPosition(boundingClientRect, clientWidth);\n      transform = 'translateX(50%)';\n      break;\n    case 'top-right':\n      bottom = getTopPosition(clientHeight, element, offset);\n      right = getRightPosition(boundingClientRect, clientWidth);\n      transform = 'translate(0%,0%)';\n      break;\n    case 'bottom-left':\n      bottom = getBottomPosition(clientHeight, boundingClientRect, element, offset);\n      left = getLeftPosition(boundingClientRect);\n      transform = 'translateY(100%)';\n      break;\n    case 'bottom-center':\n      bottom = getBottomPosition(clientHeight, boundingClientRect, element, offset);\n      right = getCenterPosition(boundingClientRect, clientWidth);\n      transform = 'translate(50%,100%)';\n      break;\n    case 'bottom-right':\n      bottom = getBottomPosition(clientHeight, boundingClientRect, element, offset);\n      right = getRightPosition(boundingClientRect, clientWidth);\n      transform = 'translateY(100%)';\n      break;\n    case 'left-center':\n      right = getRightPosition(boundingClientRect, clientWidth) + boundingClientRect.width + offset;\n      bottom = getTopPosition(clientHeight, element, offset) - offset - (boundingClientRect.height / 2);\n      transform = 'translateY(50%)';\n      break;\n    case 'right-center':\n      left = getLeftPosition(boundingClientRect) + boundingClientRect.width + offset;\n      bottom = getTopPosition(clientHeight, element, offset) - offset - (boundingClientRect.height / 2);\n      transform = 'translateY(50%)';\n      break;\n  }\n\n  return ({ bottom, right, left, transform, ...setWidth && { width: boundingClientRect.width } });\n};\n\nexport default getElementAbsolutePosition;\n"],"file":"getElementAbsolutePosition.js"}