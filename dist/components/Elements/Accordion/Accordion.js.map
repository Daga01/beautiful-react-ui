{"version":3,"sources":["components/Elements/Accordion/Accordion.js"],"names":["cloneAccordionContents","child","index","props","type","AccordionContent","React","cloneElement","internalId","active","onChange","Accordion","memo","children","color","className","rest","classList","Children","map","propTypes","Color","PropTypes","func","oneOfType","number","string","node","defaultProps","undefined","Content"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAOA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAyB;AACtD,MAAI,CAACF,KAAL,EAAY,OAAO,IAAP;;AAEZ,MAAIA,KAAK,CAACG,IAAN,KAAeC,4BAAnB,EAAqC;AACnC,sBAAK,4FAAL;AAEA,WAAO,IAAP;AACD;;AAED,SAAOC,kBAAMC,YAAN,CAAmBN,KAAnB,EAA0B;AAC/BO,IAAAA,UAAU,EAAEN,KADmB;AAE/BO,IAAAA,MAAM,EAAEN,KAAK,CAACM,MAAN,KAAiBP,KAFM;AAG/BQ,IAAAA,QAAQ,EAAEP,KAAK,CAACO;AAHe,GAA1B,CAAP;AAKD,CAdD;;AAqBA,IAAMC,SAAS,GAAGL,kBAAMM,IAAN,CAAW,UAACT,KAAD,EAAW;AAAA,MAC9BU,QAD8B,GACUV,KADV,CAC9BU,QAD8B;AAAA,MACpBC,KADoB,GACUX,KADV,CACpBW,KADoB;AAAA,MACbC,SADa,GACUZ,KADV,CACbY,SADa;AAAA,MACCC,IADD,4BACUb,KADV;;AAEtC,MAAMc,SAAS,GAAG,4BAAW,iBAAX,yBAA8CH,KAA9C,GAAuDC,SAAvD,CAAlB;AAEA,SACE;AAAK,IAAA,SAAS,EAAEE;AAAhB,KAA+BD,IAA/B,GACGE,gBAASC,GAAT,CAAaN,QAAb,EAAuB,UAACZ,KAAD,EAAQC,KAAR;AAAA,WAAkBF,sBAAsB,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAxC;AAAA,GAAvB,CADH,CADF;AAKD,CATiB,CAAlB;;AAeAQ,SAAS,CAACS,SAAV,GAAsB;AAKpBN,EAAAA,KAAK,EAAEO,aALa;AASpBX,EAAAA,QAAQ,EAAEY,sBAAUC,IATA;AAapBd,EAAAA,MAAM,EAAEa,sBAAUE,SAAV,CAAoB,CAC1BF,sBAAUG,MADgB,EAE1BH,sBAAUI,MAFgB,CAApB,CAbY;AAoBpBb,EAAAA,QAAQ,EAAES,sBAAUK;AApBA,CAAtB;AAuBAhB,SAAS,CAACiB,YAAV,GAAyB;AACvBf,EAAAA,QAAQ,EAAEgB,SADa;AAEvBnB,EAAAA,QAAQ,EAAEmB,SAFa;AAGvBpB,EAAAA,MAAM,EAAEoB,SAHe;AAIvBf,EAAAA,KAAK,EAAE;AAJgB,CAAzB;AAQAH,SAAS,CAACmB,OAAV,GAAoBzB,4BAApB;eAEeM,S","sourcesContent":["import React, { Children } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Color, warn } from '../../../shared';\nimport AccordionContent from './AccordionContent';\n\nimport './accordion.scss';\n\n/**\n * returns only AccordionContent children whilst wipes out the others\n */\nconst cloneAccordionContents = (child, index, props) => {\n  if (!child) return null;\n\n  if (child.type !== AccordionContent) {\n    warn('Accordion allows only Accordion.Content children, other kind of elements will be wiped out');\n\n    return null;\n  }\n\n  return React.cloneElement(child, {\n    internalId: index,\n    active: props.active === index,\n    onChange: props.onChange,\n  });\n};\n\n\n/**\n * Accordion is a controlled component used to toggle contents visibility.\n */\n// the React.memo has been used here rather than on the export line like other cases, to avoid wrapping the shortcut.\nconst Accordion = React.memo((props) => {\n  const { children, color, className, ...rest } = props;\n  const classList = classNames('bi bi-accordion', `bi-accordion-${color}`, className);\n\n  return (\n    <div className={classList} {...rest}>\n      {Children.map(children, (child, index) => cloneAccordionContents(child, index, props))}\n    </div>\n  );\n});\n\n/**\n * It is perfectly safe to disable the following eslint rule as the props it is referring to are actually passed\n * down to the cloneAccordionContents method.\n */\nAccordion.propTypes = {\n  /**\n   * Defines the color of the accordion, can be one of the following:\n   * `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`.\n   */\n  color: Color,\n  /**\n   * The callback to be performed on content change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Defines the current active tab index\n   */\n  active: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n};\n\nAccordion.defaultProps = {\n  children: undefined,\n  onChange: undefined,\n  active: undefined,\n  color: 'default',\n};\n\n// shortcut to AccordionContent so that we can use it as the following: `Accordion.Content`\nAccordion.Content = AccordionContent;\n\nexport default Accordion;\n"],"file":"Accordion.js"}