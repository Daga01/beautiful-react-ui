{"version":3,"sources":["../../../../src/components/Elements/Popup/Popup.js"],"names":["Popup","props","trigger","isOpen","onToggle","action","title","placement","hideArrow","offset","children","className","rest","triggerWrapperRef","elementStyle","setElementStyle","mouseIsHovering","setMouseHover","classList","calcPopupPosition","current","nextStyle","onMouseEnter","onMouseLeave","actions","onClick","undefined","propTypes","PropTypes","node","isRequired","func","bool","oneOf","string","number","defaultProps","React","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Portal from '../_Portal/Portal';\nimport getElementAbsolutePosition from './getElementAbsolutePosition';\nimport { useWindowResize } from '../../../shared';\n\nimport './popup.scss';\n\n/**\n * A Popup is a transient view that shows its content when a user clicks or hovers a defined area.\n * (possibly another component).\n */\nconst Popup = (props) => {\n  const {\n    trigger, isOpen, onToggle, action, title, placement, hideArrow, offset, children, className, ...rest\n  } = props;\n  const triggerWrapperRef = useRef(null);\n  const [elementStyle, setElementStyle] = useState(null);\n  const [mouseIsHovering, setMouseHover] = useState(false);\n\n  const classList = classNames('bi bi-popup', {\n    'popup-top-left': placement === 'top-left',\n    'popup-top-center': placement === 'top-center',\n    'popup-top-right': placement === 'top-right',\n    'popup-left-center': placement === 'left-center',\n    'popup-right-center': placement === 'right-center',\n    'popup-bottom-left': placement === 'bottom-left',\n    'popup-bottom-center': placement === 'bottom-center',\n    'popup-bottom-right': placement === 'bottom-right',\n    'popup-hide-arrow': hideArrow === true,\n  }, className);\n\n  // Derives the component's position from the trigger's wrapper element then set it as elementStyle state.\n  const calcPopupPosition = () => {\n    if (isOpen && triggerWrapperRef.current) {\n      const nextStyle = getElementAbsolutePosition(triggerWrapperRef.current, placement, offset);\n      setElementStyle(nextStyle);\n    }\n  };\n\n  // recalculate the component's position when one of the following props change\n  useEffect(calcPopupPosition, [isOpen, offset, title, placement, children, hideArrow]);\n\n  // recalculate the component's position on window resize\n  useWindowResize(calcPopupPosition);\n\n  /**\n   * onMouseEnter and onMouseLeave functions are both used to handle the hover action by toggling the\n   * mouseIsHovering state and firing the onToggle callback\n   */\n  const onMouseEnter = () => {\n    if (!mouseIsHovering) {\n      setMouseHover(true);\n      onToggle();\n    }\n  };\n\n  const onMouseLeave = () => {\n    if (mouseIsHovering) {\n      setMouseHover(false);\n      onToggle();\n    }\n  };\n\n  const actions = {\n    onClick: action === 'click' ? onToggle : undefined,\n    onMouseEnter: (action === 'hover') ? onMouseEnter : undefined,\n    onMouseLeave: action === 'hover' ? onMouseLeave : undefined,\n  };\n\n  return (\n    <>\n      {/* To easily access the trigger's position we wrap it within a referenced span */}\n      <span className=\"bi-popup-trigger\" ref={triggerWrapperRef} role=\"complementary\" {...actions}>\n        {trigger}\n      </span>\n      {!isOpen ? null : (\n        <Portal id=\"bi-popups\">\n          {/* The actual popup is shown within a Portal to avoid layout glitches */}\n          <div {...rest} className={classList} style={elementStyle}>\n            {title && <h1 className=\"popup-title\">{title}</h1>}\n            <div className=\"popup-content\">{children}</div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n};\n\n\nPopup.propTypes = {\n  /**\n   * Defines the React node to apply the popup to\n   */\n  trigger: PropTypes.node.isRequired,\n  /**\n   * Defines the callback to be performed each time the event defined by the `action` prop fires, generally `click`\n   */\n  onToggle: PropTypes.func.isRequired,\n  /**\n   * Defines whether the popup is shown or not\n   */\n  isOpen: PropTypes.bool,\n  /**\n   * Defines when to fire the onToggle callback, can be `click` or `hover`\n   */\n  action: PropTypes.oneOf(['click', 'hover']),\n  /**\n   * Define the possible popup title\n   */\n  title: PropTypes.string,\n  /**\n   * Defines the popup placement\n   */\n  placement: PropTypes.string,\n  /**\n   * Defines whether or not the popup should possibly show the trigger-referencing arrow.\n   */\n  hideArrow: PropTypes.bool,\n  /**\n   * Defines a number in pixel to possibly separate the popup from the trigger\n   */\n  offset: PropTypes.number,\n};\n\nPopup.defaultProps = {\n  isOpen: false,\n  action: 'click',\n  title: null,\n  placement: 'top-center',\n  hideArrow: false,\n  offset: 10,\n};\n\nexport default React.memo(Popup);\n"],"file":"Popup.js"}